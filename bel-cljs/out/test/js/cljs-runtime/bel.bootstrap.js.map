{"version":3,"sources":["bel/bootstrap.cljs"],"mappings":";AASA,qCAAA,rCAAMA,kFAAmBC;AAAzB,kFAIO,AAACO,+CAAO,WAAKC,5IACb,OAACD,+CAAOJ;AADA,AAAQ,2CAAA,pCAACM,kCAAqBD;GADtC,AAACJ,4CAAI,WAAKC;AAAL,AAAS,yDAAA,lDAACC,uDAAkBD;oFAFjC,8DAAA,9DAACJ,mDAAcD,pIACf,AAACE,qDAAaC;;AAKrB,8BAAA,9BAAMO;AAAN,AACE,IAAMC,MAAI,AAACC;AAAX,AACE,AAACC,uBAAWF,IAAI,AAACZ,mCAAkB;;AACnCY","names":["bel.bootstrap/source-str->parts","source-str","clojure.string.split","cljs.core.partition_by","clojure.string/blank?","cljs.core.map","xs","clojure.string.join","cljs.core.remove","s","clojure.string/starts-with?","bel.bootstrap/bootstrap-env","env","bel.evaluator.env","bel.evaluator/eval-all"],"sourcesContent":["(ns bel.bootstrap\n  (:require\n   [clojure.string :as cstring]\n   [bel.evaluator :as e]\n   [shadow.resource :as rc]))\n\n;; ---------\n;; Bootstrap\n\n(defn source-str->parts [source-str]\n  (->> (cstring/split source-str #\"\\n\")\n       (partition-by cstring/blank?)\n       (map (fn [xs] (cstring/join \"\\n\" xs)))\n       (remove (fn [s] (cstring/starts-with? s \";\")))\n       (remove cstring/blank?)))\n\n(defn bootstrap-env []\n  (let [env (e/env)]\n    (e/eval-all env (source-str->parts (rc/inline \"core.bel\")))\n    env))\n"]}