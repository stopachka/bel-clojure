{"version":3,"sources":["instaparse/repeat.cljc"],"mappings":"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","names":["instaparse.repeat/empty-result?","result","cljs.core/vector?","cljs.core._EQ_","cljs.core/count","cljs.core/map?","cljs.core/contains?","cljs.core/empty?","cljs.core.get","instaparse.repeat/failure-signal","instaparse.gll/->Failure","var_args","G__24414","instaparse.repeat/get-end","js/Error","parse","vec__24415","cljs.core.nth","start","end","instaparse.viz/span","cljs.core/long","index","vec__24419","instaparse.repeat/parse-from-index","grammar","initial-parser","text","segment","tramp","instaparse.gll.make_tramp","instaparse.gll/push-listener","instaparse.gll/TopListener","instaparse.gll.run","instaparse.repeat/select-parse","parses","length","cljs.core/seq","vec__24426","cljs.core/first","temp__5802__auto__","follow-ups","cljs.core/next","G__24437","instaparse.repeat/repeat-parse-hiccup","root-tag","instaparse.repeat.repeat_parse_hiccup","first-result","G__24444","vec__24445","vec__24457","instaparse.auto-flatten-seq/auto-flatten-seq","selection","instaparse.gll/safe-with-meta","instaparse.auto-flatten-seq/convert-afs-to-vec","instaparse.auto-flatten-seq/conj-flat","G__24462","instaparse.repeat/repeat-parse-enlive","instaparse.repeat.repeat_parse_enlive","G__24470","vec__24471","vec__24481","instaparse.auto-flatten-seq/EMPTY","G__24490","instaparse.repeat/repeat-parse-no-tag","instaparse.repeat.repeat_parse_no_tag","G__24499","vec__24501","vec__24509","G__24522","instaparse.repeat/repeat-parse","output-format","instaparse.gll/text->segment","fexpr__24532","instaparse.repeat/repeat-parse-with-header","header-parser","repeating-parser","header-results","or__5045__auto__","header-result","cljs.core.apply","cljs.core/max-key","instaparse.repeat.get_end","repeat-result","span-meta","instaparse.gll/Failure","G__24545","cljs.core/Keyword","instaparse.repeat/try-repeating-parse-strategy-with-header","start-production","start-rule","parsers","cljs.core/last","cljs.core/not","and__5043__auto__","G__24558","fexpr__24557","instaparse.combinators-source/cat","cljs.core/butlast","instaparse.reduction/raw-non-terminal-reduction","instaparse.repeat/try-repeating-parse-strategy","parser","instaparse.repeat.repeat_parse","instaparse.repeat/used-memory-optimization?","tree","cljs.core/meta"],"sourcesContent":["(ns instaparse.repeat\r\n  (:require [instaparse.gll :as gll\r\n             #?@(:clj [:refer [profile]])]\r\n            [instaparse.combinators-source :as c]\r\n            [instaparse.auto-flatten-seq :as afs]\r\n            [instaparse.viz :as viz]\r\n            [instaparse.reduction :as red]\r\n            [instaparse.failure :as fail])\r\n  #?(:cljs\r\n     (:require-macros [instaparse.gll :refer [profile]])))\r\n\r\n(defn empty-result? [result]\r\n  (or (and (vector? result) (= (count result) 1))\r\n      (and (map? result) (contains? result :tag) (empty? (get result :content)))\r\n      (empty? result)))       \r\n\r\n(def ^:constant failure-signal (gll/->Failure nil nil))\r\n\r\n(defn get-end \r\n  (#?(:clj ^long [parse]\r\n      :cljs ^number [parse])\r\n    (let [[start end] (viz/span parse)]\r\n      (if end (long end) (count parse))))\r\n  (#?(:clj ^long [parse ^long index]\r\n      :cljs ^number [parse ^number index])\r\n    (let [[start end] (viz/span parse)]\r\n      (if end (long end) (+ index (count parse))))))\r\n\r\n(defn parse-from-index [grammar initial-parser text segment index]\r\n  (let [tramp (gll/make-tramp grammar text segment)]\r\n    (gll/push-listener tramp [index initial-parser] (gll/TopListener tramp))\r\n    (gll/run tramp)))\r\n\r\n(defn select-parse\r\n  \"Returns either:\r\n   [a-parse end-index a-list-of-valid-follow-up-parses]\r\n   [a-parse end-index nil] (successfully reached end of text)\r\n   nil (hit a dead-end with this strategy)\"\r\n  [grammar initial-parser text segment index parses]\r\n  ;(clojure.pprint/pprint parses)\r\n  (let [length (count text)]\r\n    (loop [parses (seq parses)]\r\n      (when parses\r\n        (let [parse (first parses)\r\n              [start end] (viz/span parse)\r\n              end (if end end (+ index (count parse)))]\r\n          (cond\r\n            (= end length) [parse end nil]\r\n            :else \r\n            (if-let [follow-ups (seq (parse-from-index grammar initial-parser text segment end))]\r\n              [parse end follow-ups]\r\n              (recur (next parses)))))))))\r\n                                 \r\n(defn repeat-parse-hiccup \r\n  ([grammar initial-parser root-tag text segment]\r\n    (repeat-parse-hiccup grammar initial-parser root-tag text segment 0))\r\n  ([grammar initial-parser root-tag text segment index]\r\n    (let [length (count text)\r\n          first-result (parse-from-index grammar initial-parser text segment index)]\r\n      (loop [index (long index)\r\n             parses (afs/auto-flatten-seq [root-tag])\r\n             \r\n             [parse end follow-ups :as selection]\r\n             (select-parse grammar initial-parser text segment index first-result)]\r\n        (cond\r\n          (nil? selection) failure-signal\r\n          (= index end) failure-signal\r\n          (nil? follow-ups) (gll/safe-with-meta\r\n                              (afs/convert-afs-to-vec \r\n                                (afs/conj-flat parses parse))\r\n                              {:optimize :memory\r\n                               :instaparse.gll/start-index 0\r\n                               :instaparse.gll/end-index length})\r\n          :else (recur (long end)\r\n                       (afs/conj-flat parses parse)\r\n                       (select-parse grammar initial-parser text segment end follow-ups)))))))\r\n\r\n(defn repeat-parse-enlive\r\n  ([grammar initial-parser root-tag text segment]\r\n    (repeat-parse-enlive grammar initial-parser root-tag text segment 0))\r\n  ([grammar initial-parser root-tag text segment index]\r\n    (let [length (count text)\r\n          first-result (parse-from-index grammar initial-parser text segment index)]\r\n      (loop [index (long index)\r\n             parses afs/EMPTY\r\n             \r\n             [parse end follow-ups :as selection]\r\n             (select-parse grammar initial-parser text segment index first-result)]\r\n        (cond\r\n          (nil? selection) failure-signal\r\n          (= index end) failure-signal          \r\n          (nil? follow-ups) (gll/safe-with-meta\r\n                              {:tag root-tag \r\n                               :content (seq (afs/conj-flat parses parse))}\r\n                              {:optimize :memory\r\n                               :instaparse.gll/start-index 0\r\n                               :instaparse.gll/end-index length})\r\n          :else (recur (long end)\r\n                       (afs/conj-flat parses parse)\r\n                       (select-parse grammar initial-parser text segment end follow-ups)))))))\r\n\r\n(defn repeat-parse-no-tag \r\n  ([grammar initial-parser text segment]\r\n    (repeat-parse-no-tag grammar initial-parser text segment 0))\r\n  ([grammar initial-parser text segment index]\r\n    (let [length (count text)\r\n          first-result (parse-from-index grammar initial-parser text segment index)]\r\n      (loop [index (long index)\r\n             parses afs/EMPTY\r\n             \r\n             [parse end follow-ups :as selection]\r\n             (select-parse grammar initial-parser text segment index first-result)]\r\n        (cond\r\n          (nil? selection) failure-signal\r\n          (= index end) failure-signal          \r\n          (nil? follow-ups) (gll/safe-with-meta\r\n                              (afs/conj-flat parses parse)\r\n                              {:optimize :memory\r\n                               :instaparse.gll/start-index 0\r\n                               :instaparse.gll/end-index length})\r\n          :else (recur (long end)\r\n                       (afs/conj-flat parses parse)\r\n                       (select-parse grammar initial-parser text segment end follow-ups)))))))\r\n\r\n(defn repeat-parse \r\n  ([grammar initial-parser output-format text] (repeat-parse-no-tag grammar initial-parser text (gll/text->segment text)))\r\n  ([grammar initial-parser output-format root-tag text]\r\n    {:pre [(#{:hiccup :enlive} output-format)]} \r\n    (cond\r\n      (= output-format :hiccup)\r\n      (repeat-parse-hiccup grammar initial-parser root-tag text (gll/text->segment text))\r\n      (= output-format :enlive)\r\n      (repeat-parse-enlive grammar initial-parser root-tag text (gll/text->segment text)))))\r\n\r\n(defn repeat-parse-with-header\r\n  ([grammar header-parser repeating-parser output-format root-tag text]\r\n    (let [segment (gll/text->segment text)\r\n          length (count text)\r\n          header-results (parse-from-index grammar header-parser text segment 0)]\r\n      (if (or (empty? header-results)\r\n              (:hide header-parser))\r\n        failure-signal\r\n        (let [header-result (apply max-key get-end header-results)\r\n              end (get-end header-result)\r\n              repeat-result (repeat-parse-no-tag grammar (:parser repeating-parser) text segment end)\r\n              span-meta {:optimize :memory\r\n                         :instaparse.gll/start-index 0\r\n                         :instaparse.gll/end-index length}]\r\n          (if (or (instance? instaparse.gll.Failure repeat-result)\r\n                  (and (= (:tag repeating-parser) :star)\r\n                       (empty-result? repeat-result)))\r\n            failure-signal\r\n            (case output-format\r\n              :enlive\r\n              (gll/safe-with-meta\r\n                {:tag root-tag \r\n                 :content\r\n                 (afs/conj-flat (afs/conj-flat afs/EMPTY header-result) repeat-result)}\r\n                span-meta)\r\n              :hiccup\r\n              (gll/safe-with-meta\r\n                (afs/convert-afs-to-vec \r\n                  (afs/conj-flat (afs/conj-flat (afs/auto-flatten-seq [root-tag])\r\n                                                header-result) \r\n                                 repeat-result))\r\n                span-meta)\r\n              (gll/safe-with-meta \r\n                (afs/conj-flat (afs/conj-flat afs/EMPTY header-result) repeat-result)\r\n                span-meta))))))))\r\n    \r\n(defn try-repeating-parse-strategy-with-header\r\n  [grammar text start-production start-rule output-format]\r\n  (gll/profile (gll/clear!))\r\n  (let [parsers (:parsers start-rule)\r\n        repeating-parser (last parsers)]\r\n    (if\r\n      (not (and (= (:tag start-rule) :cat)\r\n                (#{:star :plus} (:tag repeating-parser))\r\n                (not (:hide repeating-parser))\r\n                (not (:hide (:parser repeating-parser)))))\r\n      failure-signal\r\n      (let [header-parser (apply c/cat (butlast parsers))]\r\n        (if (= (:red start-rule) red/raw-non-terminal-reduction)\r\n          (repeat-parse-with-header grammar header-parser repeating-parser nil start-production text)\r\n          (repeat-parse-with-header grammar header-parser repeating-parser output-format start-production text))))))\r\n  \r\n(defn try-repeating-parse-strategy\r\n  [parser text start-production]\r\n  (let [grammar (:grammar parser)\r\n        output-format (:output-format parser)\r\n        start-rule (get grammar start-production)]\r\n    (profile (gll/clear!))\r\n    (cond\r\n      (= (:hide start-rule) true) failure-signal\r\n      (= (:red start-rule) red/raw-non-terminal-reduction)\r\n      (cond\r\n        (= (:tag start-rule) :star)\r\n        (repeat-parse grammar (:parser start-rule) output-format text)\r\n        (= (:tag start-rule) :plus)\r\n        (let [result (repeat-parse grammar (:parser start-rule) output-format text)]\r\n          (if (empty-result? result)\r\n            failure-signal\r\n            result))\r\n        :else (try-repeating-parse-strategy-with-header \r\n                grammar text start-production start-rule output-format))\r\n              \r\n      (= (:tag start-rule) :star)\r\n      (repeat-parse grammar (:parser start-rule) output-format start-production text)\r\n      (= (:tag start-rule) :plus)      \r\n      (let [result (repeat-parse grammar (:parser start-rule) output-format start-production text)]\r\n        (if (empty-result? result)\r\n          failure-signal\r\n          result))\r\n      \r\n      :else (try-repeating-parse-strategy-with-header \r\n                grammar text start-production start-rule output-format))))\r\n\r\n(defn used-memory-optimization? [tree]\r\n  (= :memory (-> tree meta :optimize)))"]}