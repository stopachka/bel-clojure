{"version":3,"sources":["cljs_test_display/core.cljs"],"mappings":"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","names":["js/goog.define","cljs-test-display.core/root-node-id","cljs-test-display.core/change-favicon","cljs-test-display.core/notifications","cljs-test-display.core/printing","js/cljs-test-display","js/cljs-test-display.core","js/cljs-test-display.core.state","cljs-test-display.core/state","cljs.core.atom","cljs-test-display.core/root-app-node","goog.dom/getElement","cljs-test-display.core/push-node!","node","cljs.core.swap_BANG_","cljs.core/update","cljs.core.fnil","cljs.core/conj","cljs-test-display.core/pop-node!","cljs.core/rest","cljs-test-display.core/initialize-state!","cljs.core/reset!","cljs-test-display.core/current-node","cljs.core/first","cljs.core/deref","cljs.core.get","cljs-test-display.core/current-node-parent","cljs.core/second","cljs-test-display.core/next-error-count","cljs.core/inc","js/cljs-test-display.core.register-document-events!","cljs-test-display.core/register-document-events!","cljs.core/memoize","goog.events/listen","goog.dom/getDocument","goog.events.EventType/KEYDOWN","e","cljs.core._EQ_","goog.events.KeyCodes/P","cljs-test-display.core/click-toggle","style-string","cljs-test-display.core/insert-style!","G__22415","G__22416","G__22417","cljs-test-display.core/n","head","goog.dom/getElementsByTagName","goog.dom/appendChild","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","seq22419","G__22420","cljs.core/next","G__22421","self__5754__auto__","tag","attributes","contents","cljs.core.apply","goog.dom/createDom","cljs.core/name","cljs.core/clj->js","cljs.core.mapv","x","js/HTMLElement","cljs.core/Symbol","goog.dom/createTextNode","cljs.core.pr_str","cljs.core.filter","cljs.core/some?","cljs-test-display.core/magic-keyword->attrs","k","cljs.core/Keyword","vec__22464","cljs.core.nth","classes","clojure.string.split","id","clojure.string/starts-with?","cljs.core.subs","G__22478","cljs.core.assoc","cljs.core/not-empty","clojure.string.join","cljs-test-display.core/tag-fn","klass","vec__22496","cljs.core/cons","cljs-test-display.core/div","cljs-test-display.core/span","G__22504","cljs-test-display.core/code","js/Error","code-str","cljs_test_display.core.code","cljs_test_display.core.n","cljs-test-display.core/current-var-info","var","cljs.core/reverse","cljs.test/get-current-env","cljs.core/meta","p__22506","map__22507","cljs.core/--destructure-map","cljs-test-display.core/process-file-name","ns","file","cljs.core.take","cljs.core/count","cljs-test-display.core/failed?","m","cljs-test-display.core/pluralize","s","n","goog.dom.classlist/toggle","cljs-test-display.core/header-node","cljs-test-display.core/add-header-node!","cljs-test-display.core/contexts-node","cljs.core/seq","cljs.test/testing-contexts-str","p__22510","map__22511","cljs-test-display.core/comparison","actual","expected","cljs-test-display.core/add-fail-node!","formatter-fn","or__5045__auto__","cljs.core/pr-str","temp__5804__auto__","message","curr-node","goog.dom.classlist/add","p__22517","map__22518","cljs-test-display.core/error-comparison","error-number","js/console.log","js/console.error","cljs-test-display.core/add-error-node!","cljs-test-display.core/add-passing-node!","cljs-test-display.core/add-ns-node!","new-current-node","p1__22530#","cljs-test-display.core/add-var-node","map__22535","name","line","info","p1__22533#","p__22538","map__22539","cljs-test-display.core/summary","fail","error","pass","test","assertions","cljs-test-display.core/display-summary!","report-header","summary-node'","goog.dom/removeChildren","cljs-test-display.core/print-comparison","cljs.core.println","G__22546","G__22548","cljs.test/report","cljs.test/inc-report-counter!","cljs.test/testing-vars-str","cljs-test-display.favicon/red","cljs-test-display.favicon/green","cljs-test-display.notify/failure","cljs-test-display.notify/success","cljs-test-display.core/empty-env","cljs.test.empty_env","G__22567","cljs-test-display.core/init!","cljs_test_display.core.init_BANG_","app-node-id","goog/global.document","cljs-test-display.notify/ask-permission!","cljs.core/List"],"sourcesContent":["(ns cljs-test-display.core\n  (:require\n   [cljs.test :refer [report inc-report-counter!\n                      testing-contexts-str\n                      testing-vars-str\n                      get-current-env]\n    :include-macros true]\n   [clojure.string :as string]\n   [goog.dom :as gdom]\n   [goog.dom.classlist :as classlist]\n   [goog.events :as events]\n   [goog.events.EventType :as evtype]\n   [goog.events.KeyCodes :as key-codes]\n   [cljs-test-display.favicon :as favicon]\n   [cljs-test-display.notify :as notify])\n  (:require-macros\n   [cljs-test-display.core :refer [css]]))\n\n;; ------------------------------------------------------------\n;; State Management\n;; ------------------------------------------------------------\n\n;; root-node-id specifies the id of the dom element to mount the\n;; testing application to\n(goog-define root-node-id \"app\")\n\n;; change-favicon specifies wether to change the favicon to red or\n;; green when tests complete\n(goog-define change-favicon true)\n\n;; notifications specifies wether to use the Web Notification API to\n;; to provide feedback about test results\n(goog-define notifications true)\n\n;; printing specifies wether to print out test results in the console\n;; as well\n(goog-define printing false)\n\n(defonce state (atom {}))\n\n(defn root-app-node [] (gdom/getElement root-node-id))\n\n(defn push-node! [node]\n  (swap! state update :current-node (fnil conj (list)) node))\n\n(defn pop-node! []\n  (swap! state update :current-node rest))\n\n(defn initialize-state! []\n  (reset! state {})\n  (push-node! (root-app-node)))\n\n(defn current-node []\n  (first (get @state :current-node)))\n\n(defn current-node-parent []\n  (second (get @state :current-node)))\n\n(defn next-error-count []\n  (:error-count (swap! state update :error-count (fnil inc 0))))\n\n(declare add-header-node! click-toggle n)\n\n(defonce register-document-events!\n  (memoize\n   (fn []\n     (events/listen (gdom/getDocument)\n                    evtype/KEYDOWN\n                    (fn [e]\n                      (when (= (.-keyCode e) key-codes/P)\n                        (click-toggle e)))))))\n\n(let [style-string (css)]\n  (defn insert-style! []\n    (when-not (gdom/getElement \"cljs-test-display-style\")\n      (let [node (n :style\n                    {:id \"cljs-test-display-style\"}\n                    style-string)\n            head (aget (gdom/getElementsByTagName \"head\") 0)]\n        (gdom/appendChild head node)))))\n\n#_ (insert-style!)\n\n;; ------------------------------------------------------------\n;; DOM Node Creation\n;; ------------------------------------------------------------\n\n(defn n [tag attributes & contents]\n  (apply gdom/createDom (name tag) (clj->js attributes)\n         (mapv\n          (fn [x]\n            (cond\n              (instance? js/HTMLElement x)\n              x\n              (or (string? x) (symbol? x))\n              (gdom/createTextNode (str x))\n              :else\n              (gdom/createTextNode (pr-str x))))\n          (filter some? contents))))\n\n(defn magic-keyword->attrs [k]\n  (if (keyword? k)\n    (let [classes (string/split (name k) \".\")\n          [id classes] (if (string/starts-with? (first classes) \"#\")\n                         [(subs (first classes) 1) (rest classes)]\n                         [nil classes])]\n      (cond-> {}\n        id (assoc :id id)\n        (not-empty classes) (assoc :class (string/join \" \" classes))))\n    {}))\n\n(defn tag-fn [tag]\n  (fn [klass & contents]\n    (let [[klass contents] (if (keyword? klass)\n                             [klass contents]\n                             [nil (cons klass contents)])]\n      (apply n tag (magic-keyword->attrs klass) contents))))\n\n(def div (tag-fn :div))\n(def span (tag-fn :span))\n\n(defn code\n  ([code-str] (code nil code-str))\n  ([klass code-str]\n   (n :pre (magic-keyword->attrs klass)\n      (n :code {} (pr-str code-str)))))\n\n;; ------------------------------------------------------------\n;; Data Helpers\n;; ------------------------------------------------------------\n\n(defn current-var-info []\n  (let [var (first (reverse (:testing-vars (get-current-env))))]\n    (meta var)))\n\n(defn process-file-name [{:keys [ns file]}]\n  (string/join \"/\"\n               (reverse\n                (take (inc (count (string/split (name ns) #\"\\.\")))\n                      (reverse (string/split file  #\"[/\\\\]\"))))))\n\n(defn failed? [m]\n  (not (zero? (+ (:fail m) (:error m)))))\n\n(defn pluralize [s n]\n  (if (= n 1) s (str s \"s\")))\n\n;; ------------------------------------------------------------\n;; DOM Templates\n;; ------------------------------------------------------------\n\n;; ------------------------------------------------------------\n;; Header\n\n(defn click-toggle [e]\n  (classlist/toggle (root-app-node) \"hide-passing\"))\n\n(defn header-node []\n  (div :#report-header\n     (div :container.report-body \n          (div :page-title\n               (n :img\n                  {:width 50\n                   :height 50\n                   :src \"https://clojurescript.org/images/cljs-logo-120b.png\"})\n               (div :test-title \"Test Run\"))\n          (div :#summary))))\n\n(defn add-header-node! []\n  (gdom/appendChild (root-app-node) (header-node))\n  (gdom/appendChild (root-app-node)\n                    (div :controls.container\n                     (n :button {:id \"hide-show\"\n                                 :onclick\n                                 click-toggle}\n                        \"Hide/Show Passing\"))))\n\n;; ------------------------------------------------------------\n;; Failure\n\n(defn contexts-node []\n  (when (seq (:testing-contexts (get-current-env)))\n    (div :contexts (testing-contexts-str))))\n\n(defn comparison [{:keys [actual expected]}]\n  (div \n   (code expected)\n   (div :actual (div :arrow \"\u25b6\") (code actual))))\n\n(defn add-fail-node! [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)\n        node (div :test-fail\n                  (contexts-node)\n                  (div :fail-body\n                       (when-let [message (:message m)]\n                         (div :test-message message))\n                       (comparison m)))\n        curr-node (current-node)]\n    (classlist/add curr-node \"has-failures\")\n    (classlist/add (current-node-parent) \"has-failures\")\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Error\n\n(defn error-comparison [{:keys [expected actual]}]\n  (div\n   (code expected)\n   (div :cljs-test-actual\n        (span :error-prefix \"Error: \")\n        (when actual\n          (span :error-message (.-message actual)))\n        (when actual\n          (let [error-number (next-error-count)]\n            (js/console.log \"CLJS Test Error #\" error-number)\n            (js/console.error actual)\n            (div :view-stacktrace\n                 (str \"For stacktrace: See error number \" error-number \" in console\")))))))\n\n(defn add-error-node! [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)\n        node (div :test-fail.test-error\n                  (contexts-node)\n                  (div :fail-body\n                       (when-let [message (:message m)]\n                         (div :test-message message))\n                       (error-comparison m)))\n        curr-node (current-node)]\n    (classlist/add curr-node \"has-errors\")\n    (classlist/add (current-node-parent) \"has-errors\")\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Passing\n\n(defn add-passing-node! [m]\n  (gdom/appendChild (current-node) (div :test-passing)))\n\n;; ------------------------------------------------------------\n;; NS\n\n(defn add-ns-node! [m]\n  (let [curr-node (current-node)\n        new-current-node\n        (div :container.test-ns\n           (n :h2 {} (:ns m)))]\n    (swap! state update :current-node #(cons new-current-node %))\n    (gdom/appendChild\n     curr-node\n     new-current-node)))\n\n;; ------------------------------------------------------------\n;; Var\n\n(defn add-var-node [m]\n  (let [curr-node (current-node)\n        {:keys [name line file] :as info} (current-var-info)\n        node\n        (div :test-var\n             (div :var-header\n                  (str \"/\" name)\n                  (when line\n                    (div :test-var-line (if file\n                                          (process-file-name info)\n                                          \"line\") \":\"\n                         (n :span {} line)))))]\n    (swap! state update :current-node #(cons node %))\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Summary\n\n(defn summary [{:keys [fail error pass test] :as m}]\n  (div :summary-body\n       (when (not (zero? fail))\n         (div :report-number (str fail (pluralize \" failure\" fail))))\n       (when (not (zero? error))\n         (div :report-number (str error (pluralize \" error\" error))))\n       (when-not (failed? m)\n         (div :report-number \"All Tests Passed\"))\n       (div :total-tests\n            (div \"Totals\")\n            (div :test-counts\n                 (div (str test (pluralize \" Test\" test)))\n                 (let [assertions (+ pass fail error)]\n                   (div (str assertions (pluralize \" Assertion\" assertions))))))))\n\n(defn display-summary! [m]\n  (let [report-header (gdom/getElement \"report-header\")\n        summary-node' (gdom/getElement \"summary\")]\n    (classlist/add report-header (if (failed? m)\n                                   \"tests-fail\"\n                                   \"tests-succeed\"))\n    (gdom/removeChildren summary-node')\n    (gdom/appendChild summary-node' (summary m))))\n\n;; ------------------------------------------------------------\n;; Hooking into cljs.test/report\n;; ------------------------------------------------------------\n\n(defn print-comparison [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)]\n    (println \"expected:\" (formatter-fn (:expected m)))\n    (println \"  actual:\" (formatter-fn (:actual m)))))\n\n(defmethod report [::default :pass] [m]\n  (add-passing-node! m)\n  (inc-report-counter! :pass))\n\n;; namespace start and end\n\n(defmethod report [::default :begin-test-ns] [m]\n  (add-ns-node! m)\n  (when printing\n    (println \"\\nTesting\" (name (:ns m)))))\n\n(defmethod report [::default :end-test-ns] [m]\n  (swap! state update :current-node rest))\n\n;; var start and end\n\n(defmethod report [::default :begin-test-var] [m]\n  (add-var-node m))\n\n(defmethod report [::default :end-test-var] [m]\n  (swap! state update :current-node rest))\n\n;; failure and errors\n\n(defmethod report [::default :fail] [m]\n  (add-fail-node! m)\n  (inc-report-counter! :fail)\n  (when printing\n    (println \"\\nFAIL in\" (testing-vars-str m))\n    (when (seq (:testing-contexts (get-current-env)))\n      (println (testing-contexts-str)))\n    (when-let [message (:message m)] (println message))\n    (print-comparison m)))\n\n(defmethod report [::default :error] [m]\n  (inc-report-counter! :error)\n  (println \"\\nERROR in\" (testing-vars-str m))\n  (when (seq (:testing-contexts (get-current-env)))\n    (println (testing-contexts-str)))\n  (when-let [message (:message m)] (println message))\n  (print-comparison m)\n  ;; display AFTER so that error shows up in console after the printed error\n  (add-error-node! m))\n\n;; Ignore these but keep them as a reference\n#_(defmethod report [::default :end-run-tests] [m])\n#_(defmethod report [::default :end-test-all-vars] [m])\n#_(defmethod report [::default :end-test-vars] [m])\n\n;; summary\n\n(defmethod report [::default :summary] [m]\n  (when change-favicon\n    (if (failed? m)\n      (favicon/red)\n      (favicon/green)))\n  (when notifications\n    (if (failed? m)\n      (notify/failure m)\n      (notify/success)))  \n  (display-summary! m)\n  (gdom/appendChild (root-app-node)\n                    (div :footer\n                         (div :container\n                              (div :tip\n                                   \"Hit the \"\n                                   (span :control-key \"P\")\n                                   \" key to toggle the display of passing tests.\"))))\n  (when printing\n    (println \"\\nRan\" (:test m) \"tests containing\"\n             (+ (:pass m) (:fail m) (:error m)) \"assertions.\")\n    (println (:fail m) \"failures,\" (:error m) \"errors.\")))\n\n;; ------------------------------------------------------------\n;; Main API\n;; ------------------------------------------------------------\n\n(defn empty-env []\n  (assoc (cljs.test/empty-env) :reporter ::default))\n\n(defn init!\n  \"This function initializes the environment for a test run. It must\n  be called before every test run.\n\n  As a convenience it returns a cljs.test/empty-env initialized so\n  that the test run will use the cljs-test-display formatter.\n\n  This function takes an optional single argument: the id of the DOM\n  node to mount.  It defaults to \\\"app\\\"\n\n  Example Usage:\n\n  (cljs.test/run-tests (cljs-test-display/init! \\\"app\\\")\n                       'example.core-test\n                       'example.core-other-test)\"\n  ([] (init! nil))\n  ([app-node-id]\n   (if (nil? goog/global.document) ;; if not in HTML env ingore display\n     (cljs.test/empty-env)\n     (do\n       (when app-node-id\n         (assert (or (string? app-node-id)\n                     (symbol? app-node-id)\n                     (keyword? app-node-id))\n                 \"Must provide an something we can call cljs.core/name on.\")\n         (set! root-node-id (name app-node-id)))\n       (assert (gdom/getElement (name root-node-id))\n               (str \"cljs-test-display: Element with id \"\n                    (pr-str root-node-id)\n                    \" does not exist.\"))\n       (when notifications (notify/ask-permission!))\n       (insert-style!)\n       (register-document-events!)\n       (set! (.-innerHTML (root-app-node)) \"\")\n       (add-header-node!)\n       (initialize-state!)\n       (empty-env)))))\n"]}