{"version":3,"sources":["instaparse/combinators_source.cljc"],"mappings":"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","names":["instaparse.combinators-source/Epsilon","instaparse.combinators-source/opt","parser","cljs.core._EQ_","instaparse.combinators-source/plus","instaparse.combinators-source/star","js/Error","instaparse.combinators-source/rep","m","n","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","instaparse.combinators-source/alt","seq23269","self__5755__auto__","cljs.core/seq","parsers","cljs.core/every?","cljs.core.partial","cljs.core/=","instaparse.reduction/singleton?","cljs.core/first","instaparse.combinators-source/ord2","parser1","parser2","G__23273","instaparse.combinators-source/ord","args-arr__5794__auto__","argseq__5795__auto__","seq23271","G__23272","cljs.core/next","self__5754__auto__","cljs.core.remove","cljs.core.apply","instaparse.combinators-source/cat","seq23274","instaparse.combinators-source/string","s","instaparse.combinators-source/string-ci","G__23276","instaparse.combinators-source/unicode-char","code-point","instaparse.combinators_source.unicode_char","lo","hi","instaparse.combinators-source/add-beginning-constraint","r","cljs.core/regexp?","js/RegExp","instaparse.util/regexp-flags","instaparse.combinators-source/regexp","cljs.core/re-pattern","instaparse.combinators-source/nt","instaparse.combinators-source/look","instaparse.combinators-source/neg","instaparse.combinators-source/hide","cljs.core.assoc","instaparse.combinators-source/hide-tag","instaparse.reduction/red","instaparse.reduction/raw-non-terminal-reduction","instaparse.combinators-source/hidden-tag?","instaparse.combinators-source/unhide-content","cljs.core.dissoc","G__23277","cljs.core.map","G__23278","G__23279","instaparse.combinators-source/unhide-all-content","grammar","cljs.core.into","iter__5523__auto__","s__23281","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__23283","cljs.core/chunk-buffer","i__23282","vec__23284","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23280","cljs.core/chunk-rest","vec__23287","cljs.core/cons","cljs.core/rest","k","v","instaparse.combinators-source/unhide-tags","reduction-type","temp__5802__auto__","reduction","instaparse.reduction/reduction-types","s__23291","b__23293","i__23292","vec__23294","iter__23290","vec__23297","instaparse.util.throw_illegal_argument_exception","instaparse.combinators-source/unhide-all","s__23301","b__23303","i__23302","vec__23304","iter__23300","vec__23307","instaparse.combinators-source/auto-whitespace-parser","ws-parser","G__23311","cljs.core/Keyword","cljs.core.update_in","p1__23310#","G__23312","G__23313","G__23314","G__23315","instaparse.combinators_source.cat","instaparse.combinators-source/auto-whitespace","start","grammar-ws","start-ws","modified-grammar","s__23317","b__23319","i__23318","vec__23320","iter__23316","vec__23323","nt","final-grammar","cljs.core.merge","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.combinators-source\r\n  \"This is the underlying implementation of the various combinators.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.reduction :refer [singleton? red\r\n                                          raw-non-terminal-reduction\r\n                                          reduction-types]]\r\n            [instaparse.util :refer [throw-illegal-argument-exception #?(:cljs regexp-flags)]]))\r\n\r\n;; Ways to build parsers\r\n\r\n(def Epsilon {:tag :epsilon})\r\n\r\n(defn opt \"Optional, i.e., parser?\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :opt :parser parser}))\r\n\r\n(defn plus \"One or more, i.e., parser+\"\r\n  [parser]\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :plus :parser parser}))\r\n\r\n(defn star \"Zero or more, i.e., parser*\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :star :parser parser}))\r\n\r\n(defn rep \"Between m and n repetitions\"\r\n  [m n parser]\r\n  {:pre [(<= m n)]}\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :rep :parser parser :min m :max n}))\r\n\r\n(defn alt \"Alternation, i.e., parser1 | parser2 | parser3 | ...\"\r\n  [& parsers] \r\n  (cond\r\n    (every? (partial = Epsilon) parsers) Epsilon\r\n    (singleton? parsers) (first parsers)\r\n    :else {:tag :alt :parsers parsers}))\r\n\r\n(defn- ord2 [parser1 parser2]\r\n  {:tag :ord :parser1 parser1 :parser2 parser2})\r\n\r\n(defn ord \"Ordered choice, i.e., parser1 / parser2\"\r\n  ([] Epsilon)\r\n  ([parser1 & parsers]\r\n    (let [parsers (if (= parser1 Epsilon)\r\n                    (remove #{Epsilon} parsers)\r\n                    parsers)]\r\n      (if (seq parsers)\r\n        (ord2 parser1 (apply ord parsers))\r\n        parser1))))\r\n\r\n(defn cat \"Concatenation, i.e., parser1 parser2 ...\"\r\n  [& parsers]\r\n  (if (every? (partial = Epsilon) parsers) Epsilon\r\n    (let [parsers (remove #{Epsilon} parsers)]\r\n      (if (singleton? parsers) (first parsers) ; apply vector reduction\r\n        {:tag :cat :parsers parsers}))))\r\n\r\n(defn string \"Create a string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n    {:tag :string :string s}))\r\n\r\n(defn string-ci \"Create a case-insensitive string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n      {:tag :string-ci :string s}))\r\n\r\n(defn unicode-char\r\n  \"Matches a Unicode code point or a range of code points\"\r\n  ([code-point]\r\n   (unicode-char code-point code-point))\r\n  ([lo hi]\r\n   (assert (<= lo hi) \"Character range minimum must be less than or equal the maximum\")\r\n   {:tag :char :lo lo :hi hi}))\r\n\r\n#?(:cljs\r\n   (defn- add-beginning-constraint\r\n     \"JavaScript regexes have no .lookingAt method, so in cljs we just\r\n  add a '^' character to the front of the regex.\"\r\n     [r]\r\n     (if (regexp? r)\r\n       (js/RegExp. (str \"^\" (.-source r)) (regexp-flags r))\r\n       r)))\r\n\r\n(defn regexp \"Create a regexp terminal out of regular expression r\"\r\n  [r]\r\n  (if (= r \"\") Epsilon\r\n      {:tag :regexp\r\n       :regexp (-> (re-pattern r)\r\n                   #?(:cljs add-beginning-constraint))}))\r\n\r\n(defn nt \"Refers to a non-terminal defined by the grammar map\"\r\n  [s] \r\n  {:tag :nt :keyword s})\r\n\r\n(defn look \"Lookahead, i.e., &parser\" \r\n  [parser] \r\n  {:tag :look :parser parser}) \r\n\r\n(defn neg \"Negative lookahead, i.e., !parser\"\r\n  [parser] \r\n  {:tag :neg :parser parser})\r\n\r\n(defn hide \"Hide the result of parser, i.e., <parser>\"\r\n  [parser] \r\n  (assoc parser :hide true))\r\n\r\n(defn hide-tag \"Hide the tag associated with this rule.  \r\n  Wrap this combinator around the entire right-hand side.\"  \r\n  [parser]\r\n  (red parser raw-non-terminal-reduction))\r\n\r\n; Ways to alter a parser with hidden information, unhiding that information\r\n\r\n(defn hidden-tag?\r\n  \"Tests whether parser was created with hide-tag combinator\"\r\n  [parser]\r\n  (= (:red parser) raw-non-terminal-reduction))\r\n\r\n(defn unhide-content\r\n  \"Recursively undoes the effect of hide on one parser\"\r\n  [parser]\r\n  (let [parser (if (:hide parser) (dissoc parser :hide) parser)]\r\n    (cond\r\n      (:parser parser) (assoc parser :parser (unhide-content (:parser parser)))\r\n      (:parsers parser) (assoc parser :parsers (map unhide-content (:parsers parser)))\r\n      (= (:tag parser) :ord) (assoc parser \r\n                                    :parser1 (unhide-content (:parser1 parser))\r\n                                    :parser2 (unhide-content (:parser2 parser)))\r\n      :else parser)))\r\n\r\n(defn unhide-all-content\r\n  \"Recursively undoes the effect of hide on all parsers in the grammar\"\r\n  [grammar]\r\n  (into {} (for [[k v] grammar]\r\n             [k (unhide-content v)])))\r\n\r\n(defn unhide-tags \r\n  \"Recursively undoes the effect of hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc v :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n(defn unhide-all\r\n  \"Recursively undoes the effect of both hide and hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc (unhide-content v) :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n\r\n;; New beta feature: automatically add whitespace\r\n\r\n(defn auto-whitespace-parser [parser ws-parser]\r\n  (case (:tag parser)\r\n    (:nt :epsilon) parser  \r\n    (:opt :plus :star :rep :look :neg) (update-in parser [:parser] auto-whitespace-parser ws-parser)\r\n    (:alt :cat) (assoc parser :parsers  \r\n                       (map #(auto-whitespace-parser % ws-parser) (:parsers parser)))\r\n    :ord (assoc parser \r\n                :parser1 (auto-whitespace-parser (:parser1 parser) ws-parser)\r\n                :parser2 (auto-whitespace-parser (:parser2 parser) ws-parser))\r\n    (:string :string-ci :regexp) \r\n    ; If the string/regexp has a reduction associated with it,\r\n    ; we need to \"lift\" that reduction out to the (cat whitespace string)\r\n    ; parser that is being created.\r\n    (if (:red parser)\r\n      (assoc (cat ws-parser (dissoc parser :red)) :red (:red parser))\r\n      (cat ws-parser parser))))\r\n\r\n(defn auto-whitespace [grammar start grammar-ws start-ws]\r\n  (let [ws-parser (hide (opt (nt start-ws)))\r\n        grammar-ws (assoc grammar-ws start-ws (hide-tag (grammar-ws start-ws)))\r\n        modified-grammar (into {} \r\n                               (for [[nt parser] grammar] \r\n                                 [nt (auto-whitespace-parser parser ws-parser)]))\r\n        final-grammar (assoc modified-grammar start \r\n                             (assoc (cat (dissoc (modified-grammar start) :red) \r\n                                         ws-parser)\r\n                                    :red (:red (modified-grammar start))))]\r\n    (merge final-grammar grammar-ws)))\r\n"]}