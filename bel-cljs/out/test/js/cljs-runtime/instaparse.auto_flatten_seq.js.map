{"version":3,"sources":["instaparse/auto_flatten_seq.cljc"],"mappings":"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","names":["instaparse.auto-flatten-seq/threshold","instaparse$auto-flatten-seq$ConjFlat$conj_flat$dyn","x__5393__auto__","m__5394__auto__","instaparse.auto-flatten-seq/conj-flat","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","instaparse$auto-flatten-seq$ConjFlat$cached_QMARK_$dyn","instaparse.auto-flatten-seq/cached?","instaparse.auto-flatten-seq/ConjFlat","self","obj","instaparse.auto-flatten-seq/hash-conj","unmixed-hash","item","cljs.core/imul","cljs.core/hash","instaparse.auto-flatten-seq/expt","base","pow","n","y","z","t","cljs.core/even?","cljs.core/quot","instaparse.auto-flatten-seq/delve","v","index","cljs.core.get_in","instaparse.auto-flatten-seq/afs?","cljs.core.get","cljs.core.conj","instaparse.auto-flatten-seq/advance","cljs.core._EQ_","cljs.core/count","cljs.core/peek","instaparse.auto-flatten-seq/true-count","G__23145","cljs.core/pop","var_args","G__23147","instaparse.auto-flatten-seq/flat-seq","js/Error","instaparse.auto_flatten_seq.flat_seq","cljs.core/LazySeq","cljs.core/cons","temp__5804__auto__","next-index","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","instaparse.auto-flatten-seq/AutoFlattenSeq","instaparse.auto-flatten-seq/->AutoFlattenSeq","premix-hashcode","hashcode","cnt","dirty","cached-seq","cljs.core/pr-str*","cljs.core/seq","cljs.core/first","cljs.core/rest","other","o","cljs.core/with-meta","instaparse.auto-flatten-seq/EMPTY","cljs.core/meta","cljs.core/next","phc","instaparse.auto-flatten-seq/hash-cat","new-cnt","cljs.core.into","cljs.core/mix-collection-hash","or__5045__auto__","key","not-found","metamap","v1","v2","c","e","G__23181","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix","coll","instaparse.auto_flatten_seq.hash_ordered_coll_without_mix","existing-unmixed-hash","afs","writer","opts","cljs.core/-pr-writer","instaparse.auto-flatten-seq/auto-flatten-seq","cljs.core/vec","s","instaparse.auto-flatten-seq/flat-vec-helper","acc","temp__5802__auto__","fst","cljs.core.conj_BANG_","instaparse.auto-flatten-seq/flat-vec","cljs.core/persistent!","cljs.core/transient","instaparse$auto-flatten-seq$GetVec$get_vec$dyn","instaparse.auto-flatten-seq/get-vec","instaparse.auto-flatten-seq/GetVec","cljs.core/deref","unused__10298__auto__","self__","G__23230","args23229","cljs.core/aclone","instaparse.auto-flatten-seq/FlattenOnDemandVector","instaparse.auto-flatten-seq/->FlattenOnDemandVector","flat","cljs.core/not","cljs.core.swap_BANG_","_","i","val","cljs.core.atom","arg","cljs.core/rseq","cljs.core.assoc","k","f","init","that","cljs.core/-compare","instaparse.auto-flatten-seq/convert-afs-to-vec"],"sourcesContent":["(ns instaparse.auto-flatten-seq\r\n  #?(:clj (:import clojure.lang.PersistentVector))\r\n  #?(:clj (:require [clojure.core.protocols :refer [IKVReduce]])))\r\n\r\n(def ^:const threshold 32)\r\n\r\n(defprotocol ConjFlat\r\n  (conj-flat [self obj])\r\n  (cached? [self]))\r\n\r\n; Need a backwards compatible version of mix-collection-hash\r\n#?(:clj (defmacro compile-if [test then else]\r\n          (if (eval test)\r\n            then\r\n            else)))\r\n\r\n#?(:clj (defmacro mix-collection-hash-bc [x y]\r\n          ;; backwards-compatible\r\n          `(compile-if (resolve 'clojure.core/mix-collection-hash)\r\n                       (mix-collection-hash ~x ~y)\r\n                       ~x)))\r\n\r\n(declare EMPTY hash-cat afs? true-count)\r\n\r\n#?(:clj\r\n   (defmacro hash-conj [premix-hash-v item]\r\n     `(unchecked-add-int (unchecked-multiply-int 31 ~premix-hash-v) (hash ~item)))\r\n   :cljs\r\n   (defn ^number hash-conj\r\n     \"Returns the hash code, consistent with =, for an external ordered\r\n  collection implementing Iterable.\r\n  See http://clojure.org/data_structures#hash for full algorithms.\"\r\n     [unmixed-hash item]\r\n     (+ (imul 31 unmixed-hash) (hash item))))\r\n\r\n#?(:clj\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (unchecked-multiply-int z z))\r\n             (zero? n) (unchecked-multiply-int z y)\r\n             :else (recur n (unchecked-multiply-int z y) (unchecked-multiply-int z z)))))))\r\n   :cljs\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (imul z z))\r\n             (zero? n) (imul z y)\r\n             :else (recur n (imul z y) (imul z z))))))))\r\n\r\n(defn delve [v index]\r\n  (loop [v (get-in v index)\r\n         index index]\r\n    (if (afs? v)\r\n      (recur (get v 0) (conj index 0))\r\n      index)))\r\n\r\n(defn advance [v index]\r\n  (cond\r\n    (= (count index) 1)\r\n    (when (< (peek index) (dec (true-count v)))\r\n      (delve v [(inc (peek index))]))\r\n    \r\n    (< (peek index) (dec (true-count (get-in v (pop index)))))\r\n    (delve v (conj (pop index) (inc (peek index))))\r\n    \r\n    :else\r\n    (recur v (pop index))))\r\n\r\n(defn flat-seq\r\n  ([v] (if (pos? (count v)) \r\n         (flat-seq v (delve v [0]))\r\n         nil))\r\n  ([v index]\r\n    (lazy-seq\r\n      (cons (get-in v index) \r\n            (when-let [next-index (advance v index)] \r\n              (flat-seq v next-index))))))  \r\n\r\n#?(:clj\r\n(deftype AutoFlattenSeq [^PersistentVector v ^int premix-hashcode ^int hashcode\r\n                         ^int cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^clojure.lang.ISeq cached-seq]\r\n  Object\r\n  (toString [self] (.toString (seq self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? AutoFlattenSeq other)\r\n         (== hashcode (.hashcode ^AutoFlattenSeq other))\r\n         (== cnt (.cnt ^AutoFlattenSeq other))\r\n         (= dirty (.dirty ^AutoFlattenSeq other))\r\n         (= v (.v ^AutoFlattenSeq other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (if-let [^java.util.Collection s (seq self)]\r\n      (.iterator s)\r\n      (let [^java.util.Collection e ()]\r\n        (.iterator e))))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (let [^java.util.Collection s (seq self)]\r\n      (.toArray s)))\r\n  clojure.lang.Sequential\r\n  clojure.lang.ISeq\r\n  (equiv [self other]\r\n    (and (== hashcode (hash other))\r\n         (== cnt (count other))\r\n         (or (== cnt 0)\r\n             (= (seq self) other))))\r\n  (empty [self] (with-meta EMPTY (meta self))) \r\n  (first [self] (first (seq self)))\r\n  (next [self] (next (seq self)))\r\n  (more [self] (rest (seq self)))\r\n  (cons [self obj]\r\n    (cons obj self))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           (or dirty (.dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else \r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.ILookup\r\n  (valAt [self key]    \r\n    (.valAt v key))\r\n  (valAt [self key not-found]\r\n    (.valAt v key not-found))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (meta v))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq))))\r\n:cljs\r\n(deftype AutoFlattenSeq [^PersistentVector v ^number premix-hashcode ^number hashcode ^number cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^ISeq cached-seq]\r\n  Object\r\n  (toString [self] (pr-str* (seq self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  ISequential\r\n  ISeq\r\n  (-first [self] (first (seq self)))\r\n  (-rest [self] (rest (seq self)))\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (and ;(instance? AutoFlattenSeq other)\r\n         (= hashcode (hash other))\r\n         (= cnt (count other))\r\n         (or (= cnt 0)\r\n             (= (seq self) other))))\r\n  ICollection\r\n  (-conj [self o] (cons o self))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta EMPTY (meta self))) \r\n  INext\r\n  (-next [self] (next (seq self)))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           (or dirty (.-dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else\r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  ICounted\r\n  (-count [self] cnt)\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup v key))\r\n  (-lookup [self key not-found]\r\n    (-lookup v key not-found))\r\n  IWithMeta\r\n  (-with-meta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  IMeta\r\n  (-meta [self]\r\n    (meta v))\r\n  ISeqable\r\n  (-seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq)))))\r\n\r\n#?(:clj\r\n   (defn- hash-cat ^long [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (unchecked-add-int\r\n        (unchecked-multiply-int e (.premix-hashcode v1))\r\n        (unchecked-subtract-int (.premix-hashcode v2) e))))\r\n   :cljs\r\n   (defn- hash-cat ^number [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (+ (imul e (.-premix-hashcode v1))\r\n          (- (.-premix-hashcode v2) e)))))\r\n\r\n#?(:clj\r\n   (defn hash-ordered-coll-without-mix ^long [v]\r\n     (compile-if (resolve 'clojure.core/mix-collection-hash)\r\n       (let [thirty-one (int 31)\r\n             cnt (count v)]\r\n         (loop [acc (int 1) i (int 0)]\r\n           (if (< i cnt)\r\n             (recur (unchecked-add-int\r\n                     (unchecked-multiply-int thirty-one acc)\r\n                     (hash (v i)))\r\n                    (inc i))\r\n             acc)))\r\n       (hash v)))\r\n   :cljs\r\n   (defn ^number hash-ordered-coll-without-mix\r\n     \"Returns the partially calculated hash code, still requires a call to mix-collection-hash\"\r\n     ([coll]\r\n      (hash-ordered-coll-without-mix 1 coll))\r\n     ([existing-unmixed-hash coll]\r\n      (loop [unmixed-hash existing-unmixed-hash\r\n             coll (seq coll)]\r\n        (if-not (nil? coll)\r\n          (recur (bit-or (+ (imul 31 unmixed-hash) (hash (first coll))) 0) \r\n                 (next coll))\r\n          unmixed-hash)))))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/AutoFlattenSeq\r\n     (-pr-writer [afs writer opts]\r\n       (-pr-writer (seq afs) writer opts))))\r\n\r\n(defn auto-flatten-seq [v]\r\n  (let [v (vec v)]\r\n    (AutoFlattenSeq. v\r\n                     (hash-ordered-coll-without-mix v)\r\n                     (hash v) (count v)\r\n                     false nil)))\r\n\r\n(def EMPTY (auto-flatten-seq []))\r\n\r\n(defn afs? [s]\r\n  (instance? AutoFlattenSeq s))\r\n\r\n(defn true-count [v]\r\n  (if (afs? v)\r\n    (count (.-v ^AutoFlattenSeq v))\r\n    (count v)))\r\n\r\n;; For hiccup format, we need to be able to convert the seq to a vector.\r\n\r\n(defn flat-vec-helper [acc v]\r\n  (if-let [s (seq v)]\r\n    (let [fst (first v)]\r\n      (if (afs? fst) \r\n        (recur (flat-vec-helper acc fst) (next v))\r\n        (recur (conj! acc fst) (next v))))\r\n    acc))\r\n\r\n(defn flat-vec\r\n  \"Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\"\r\n  [v]\r\n  (persistent! (flat-vec-helper (transient []) v)))\r\n\r\n(defprotocol GetVec\r\n  (^PersistentVector get-vec [self]))\r\n\r\n#?(:clj\r\n(deftype FlattenOnDemandVector [v   ; ref containing PersistentVector or nil \r\n                                ^int hashcode\r\n                                ^int cnt\r\n                                flat] ; ref containing PersistentVector or nil                                \r\n  GetVec\r\n  (get-vec [self] \r\n           (when (not @flat)             \r\n             (dosync\r\n               (when (not @flat)\r\n                 (ref-set flat (with-meta (flat-vec @v) (meta @v))) \r\n                 (ref-set v nil)))) ; clear out v so it can be garbage collected\r\n           @flat)\r\n                    \r\n  Object\r\n  (toString [self] (.toString (get-vec self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? FlattenOnDemandVector other)\r\n         (== hashcode (.hashcode ^FlattenOnDemandVector other))\r\n         (== cnt (.cnt ^FlattenOnDemandVector other))\r\n         (= v (.v ^FlattenOnDemandVector other))\r\n         (= flat (.flat ^FlattenOnDemandVector other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (.iterator (get-vec self)))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (.toArray (get-vec self)))\r\n  clojure.lang.IPersistentCollection\r\n  (equiv [self other]\r\n    (or \r\n      (and (== hashcode (hash other))\r\n           (== cnt (count other))\r\n           (= (get-vec self) other))))\r\n  (empty [self] (with-meta [] (meta self))) \r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.IPersistentVector\r\n  (assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (assocN [self i val]\r\n    (.assocN (get-vec self) i val))\r\n  (length [self]\r\n    cnt)\r\n  (cons [self obj]\r\n    (conj (get-vec self) obj))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (ref @v) hashcode cnt (ref (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (ref (with-meta @v metamap)) hashcode cnt (ref @flat))))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (seq (get-vec self)))\r\n  clojure.lang.ILookup\r\n  (valAt [self key]\r\n    (.valAt (get-vec self) key))\r\n  (valAt [self key not-found]\r\n    (.valAt (get-vec self) key not-found))\r\n  clojure.lang.Indexed\r\n  (nth [self i]\r\n    (.nth (get-vec self) i))\r\n  (nth [self i not-found]\r\n    (.nth (get-vec self) i not-found))\r\n  clojure.lang.IFn\r\n  (invoke [self arg]\r\n    (.invoke (get-vec self) arg))\r\n  (applyTo [self arglist]\r\n    (.applyTo (get-vec self) arglist))\r\n  clojure.lang.Reversible\r\n  (rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  clojure.lang.IPersistentStack\r\n  (peek [self] \r\n    (peek (get-vec self)))\r\n  (pop [self] \r\n    (pop (get-vec self)))\r\n  clojure.lang.Associative\r\n  (containsKey [self k]\r\n    (.containsKey (get-vec self) k))\r\n  (entryAt [self k]\r\n    (.entryAt (get-vec self) k))\r\n  IKVReduce\r\n  (kv-reduce [self f init]\r\n    (.kvreduce (get-vec self) f init))\r\n  java.lang.Comparable\r\n  (compareTo [self that]\r\n    (.compareTo (get-vec self) that))\r\n  java.util.List\r\n  (get [self i] (nth (get-vec self) i))\r\n  (indexOf [self o] (.indexOf (get-vec self) o))\r\n  (lastIndexOf [self o] (.lastIndexOf (get-vec self) o))\r\n  (listIterator [self]\r\n    (.listIterator (get-vec self) 0))\r\n  (listIterator [self i]\r\n    (.listIterator (get-vec self) i))\r\n  (subList [self a z]\r\n    (.subList (get-vec self) a z))\r\n  )\r\n:cljs\r\n(deftype FlattenOnDemandVector [v   ; atom containing PersistentVector or nil \r\n                                ^number hashcode\r\n                                ^number cnt\r\n                                flat] ; atom containing PersistentVector or nil\r\n  GetVec\r\n  (get-vec [self] \r\n    (when (not @flat)             \r\n      (swap! flat (fn [_] (with-meta (flat-vec @v) (meta @v))))\r\n      (swap! v (fn [_] nil))) ; clear out v so it can be garbage collected \r\n    @flat)\r\n  \r\n  Object\r\n  (toString [self]\r\n    (pr-str* (get-vec self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (or \r\n     (and (= hashcode (hash other))\r\n          (= cnt (count other))\r\n          (= (get-vec self) other))))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta [] (meta self))) \r\n  ICounted\r\n  (-count [self] cnt)\r\n  IVector\r\n  (-assoc-n [self i val]\r\n    (-assoc-n (get-vec self) i val))\r\n  ICollection\r\n  (-conj [self obj]\r\n    (conj (get-vec self) obj))\r\n  IWithMeta\r\n  (-with-meta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (atom @v) hashcode cnt (atom (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (atom (with-meta @v metamap)) hashcode cnt (atom @flat))))\r\n  IMeta\r\n  (-meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  ISequential\r\n  ISeqable\r\n  (-seq [self]\r\n    (seq (get-vec self)))\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup (get-vec self) key))\r\n  (-lookup [self key not-found]\r\n    (-lookup (get-vec self) key not-found))\r\n  IIndexed\r\n  (-nth [self i]\r\n    (-nth (get-vec self) i))\r\n  (-nth [self i not-found]\r\n    (-nth (get-vec self) i not-found))\r\n  IFn\r\n  (-invoke [self arg]\r\n    (-invoke (get-vec self) arg))\r\n  (-invoke [self arg not-found]\r\n    (-invoke (get-vec self) arg not-found))\r\n  IReversible\r\n  (-rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  IStack\r\n  (-peek [self] \r\n    (-peek (get-vec self)))\r\n  (-pop [self] \r\n    (-pop (get-vec self)))\r\n  IAssociative\r\n  (-assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (-contains-key? [self k]\r\n    (-contains-key? (get-vec self) k))\r\n  IKVReduce\r\n  (-kv-reduce [self f init]\r\n    (-kv-reduce (get-vec self) f init))\r\n  IComparable\r\n  (-compare [self that]\r\n    (-compare (get-vec self) that))\r\n  ))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/FlattenOnDemandVector\r\n     (-pr-writer [v writer opts]\r\n       (-pr-writer (get-vec v) writer opts))))\r\n\r\n(defn convert-afs-to-vec [^AutoFlattenSeq afs]\r\n  (cond\r\n    (.-dirty afs)\r\n    (if (cached? afs)\r\n      (vec (seq afs))\r\n      #?(:clj\r\n         (FlattenOnDemandVector.\r\n          (ref (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (ref nil))\r\n         :cljs\r\n         (FlattenOnDemandVector.\r\n          (atom (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (atom nil))))\r\n    :else\r\n    (.-v afs)))\r\n"]}