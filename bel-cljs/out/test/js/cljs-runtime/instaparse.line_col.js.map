{"version":3,"sources":["instaparse/line_col.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k24431","else__5346__auto__","G__24439","cljs.core/Keyword","index","line","column","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__24448","vec__24449","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__24430","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this24432","other24433","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__24477","this__5351__auto__","k__5352__auto__","pred__24478","cljs.core/keyword-identical?","expr__24479","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","instaparse.line-col/Cursor","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__24435","extmap__5385__auto__","G__24495","cljs.core/record?","instaparse.line-col/->Cursor","instaparse.line-col/map->Cursor","instaparse.line-col/advance-cursor","cursor","text","new-index","js/Error","instaparse.line-col/make-line-col-fn","cursor-state","cljs.core.atom","cljs.core/deref","i","cljs.core.swap_BANG_","instaparse.line-col/hiccup-add-line-col-spans","line-col-fn","parse-tree","m","cljs.core/meta","start-index","end-index","and__5043__auto__","start-cursor","children","cljs.core.doall","cljs.core.map","cljs.core.partial","cljs.core/next","end-cursor","cljs.core/with-meta","cljs.core/first","cljs.core.merge","instaparse.line-col/enlive-add-line-col-spans","instaparse.line-col/add-line-col-spans","cljs.core/map?","cljs.core/sequential?","instaparse.transform/map-preserving-meta","instaparse.gll/Failure","instaparse.util.throw_illegal_argument_exception"],"sourcesContent":["(ns instaparse.line-col\r\n  (:require [instaparse.transform]\r\n            [instaparse.util :refer [throw-illegal-argument-exception]]))\r\n\r\n; Function to annotate parse-tree with line and column metadata.\r\n\r\n(defrecord Cursor [^int index ^long line ^long column])\r\n\r\n(defn- advance-cursor [^Cursor cursor ^String text new-index]\r\n  (let [new-index (int new-index)]\r\n    (assert (<= (.-index cursor) new-index))\r\n    (if (= (.-index cursor) new-index) cursor\r\n      (loop [index (.-index cursor), line (.-line cursor), column (.-column cursor)]\r\n        (cond \r\n          (= index new-index) (Cursor. index line column)\r\n          (= (.charAt text index) \\newline) (recur (inc index) (inc line) 1)\r\n          :else (recur (inc index) line (inc column)))))))\r\n         \r\n(defn- make-line-col-fn\r\n  \"Given a string `text`, returns a function that takes an index into the string,\r\nand returns a cursor, including line and column information.  For efficiency,\r\ninputs must be fed into the function in increasing order.\"\r\n  [^String text]\r\n  (let [cursor-state (atom (Cursor. 0 1 1))]\r\n    (fn line-col [i]\r\n      (swap! cursor-state advance-cursor text i)\r\n      @cursor-state)))                        \r\n\r\n(defn- hiccup-add-line-col-spans\r\n  [line-col-fn parse-tree]\r\n  (let [m (meta parse-tree), \r\n        start-index (:instaparse.gll/start-index m), \r\n        end-index (:instaparse.gll/end-index m)]\r\n    (if (and start-index end-index)\r\n      (let [start-cursor (line-col-fn start-index),\r\n            children (doall (map (partial hiccup-add-line-col-spans line-col-fn) (next parse-tree))),\r\n            end-cursor (line-col-fn end-index)]\r\n        (with-meta\r\n          (into [(first parse-tree)] children)\r\n          (merge (meta parse-tree) \r\n                 {:instaparse.gll/start-line (:line start-cursor)\r\n                  :instaparse.gll/start-column (:column start-cursor)\r\n                  :instaparse.gll/end-line (:line end-cursor)\r\n                  :instaparse.gll/end-column (:column end-cursor)})))\r\n      parse-tree)))\r\n\r\n(defn- enlive-add-line-col-spans\r\n  [line-col-fn parse-tree]\r\n  (let [m (meta parse-tree), \r\n        start-index (:instaparse.gll/start-index m), \r\n        end-index (:instaparse.gll/end-index m)]\r\n    (if (and start-index end-index)\r\n      (let [start-cursor (line-col-fn start-index),\r\n            children (doall (map (partial enlive-add-line-col-spans line-col-fn) (:content parse-tree))),\r\n            end-cursor (line-col-fn end-index)]\r\n        (with-meta\r\n          (assoc parse-tree :content children)\r\n          (merge (meta parse-tree) \r\n                 {:instaparse.gll/start-line (:line start-cursor)\r\n                  :instaparse.gll/start-column (:column start-cursor)\r\n                  :instaparse.gll/end-line (:line end-cursor)\r\n                  :instaparse.gll/end-column (:column end-cursor)})))\r\n      parse-tree)))\r\n  \r\n(defn add-line-col-spans\r\n  \"Given a string `text` and a `parse-tree` for text, return parse tree\r\nwith its metadata annotated with line and column info. The info can\r\nthen be found in the metadata map under the keywords:\r\n \r\n:instaparse.gll/start-line, :instaparse.gll/start-column,\r\n:instaparse.gll/end-line, :instaparse.gll/end-column\r\n\r\nThe start is inclusive, the end is exclusive. Lines and columns are 1-based.\"\r\n  [text parse-tree]\r\n  (let [line-col-fn (make-line-col-fn text)]\r\n    (cond\r\n      (nil? parse-tree) nil\r\n      \r\n      (and (map? parse-tree) (:tag parse-tree))\r\n      ; This is an enlive tree-seq\r\n      (enlive-add-line-col-spans line-col-fn parse-tree)     \r\n      \r\n      (and (vector? parse-tree) (keyword? (first parse-tree)))\r\n      ; This is a hiccup tree-seq\r\n      (hiccup-add-line-col-spans line-col-fn parse-tree)\r\n      \r\n      (and (sequential? parse-tree) (map? (first parse-tree)) (:tag (first parse-tree)))\r\n      ; This is an enlive tree with hidden root tag\r\n      (instaparse.transform/map-preserving-meta \r\n        (partial enlive-add-line-col-spans line-col-fn) parse-tree)\r\n      \r\n      (and (sequential? parse-tree) (vector? (first parse-tree)) (keyword? (first (first parse-tree))))\r\n      ; This is a hiccup tree with hidden root tag\r\n      (instaparse.transform/map-preserving-meta \r\n        (partial hiccup-add-line-col-spans line-col-fn) parse-tree)\r\n\r\n      (instance? instaparse.gll.Failure parse-tree)\r\n      ; pass failures through unchanged\r\n      parse-tree\r\n    \r\n      :else\r\n      (throw-illegal-argument-exception\r\n        \"Invalid parse-tree, not recognized as either enlive or hiccup format.\"))))\r\n"]}