{"version":3,"sources":["shadow/test.cljs"],"mappings":"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","names":["shadow.test/test-vars-grouped-block","vars","p1__22230#","cljs.core/group-by","cljs.core/meta","cljs.core.sort_by","cljs.core/first","cljs.core.mapcat","p__22232","vec__22233","cljs.core.nth","ns","cljs.test/report","cljs.test/block","env","cljs.test/get-current-env","once-fixtures","cljs.core.get_in","each-fixtures","G__22261","cljs.core/Keyword","js/Error","cljs.test/execution-strategy","cljs.core.filter","cljs.core.comp","cljs.core.partial","cljs.test/wrap-map-fixtures","cljs.test/test-var-block","each-fixture-fn","cljs.test/join-fixtures","G__22265","fexpr__22264","seq__22267","cljs.core/seq","chunk__22268","count__22269","i__22270","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","v","t","G__22282","G__22284","cljs.test/run-block","cljs.test/test-var-block*","cljs.test/disable-async","shadow.test/test-ns-block","cljs.core/Symbol","map__22294","cljs.core/--destructure-map","cljs.core.get","test-ns","shadow.test.env/get-test-ns-info","cljs.core/not","cljs.core.println","p__22303","map__22304","shadow.test/prepare-test-run","report-fn","orig-report","cljs.test/set-env!","cljs.core.assoc","seq__22327","chunk__22329","count__22330","i__22331","vec__22345","map__22348","vec__22349","map__22352","ns-info","shadow.test.env/get-tests","fixtures","fix","cljs.test.update_current_env_BANG_","cljs.core/assoc","p1__22300#","cljs.core.map","cljs.core/set","shadow.test/finish-test-run","block","cljs.core/vector?","cljs.core.conj","map__22367","report-counters","var_args","G__22371","shadow.test/run-test-vars","test-vars","shadow.test.run_test_vars","cljs.test.empty_env","cljs.core.into","G__22384","shadow.test/test-ns","shadow.test.test_ns","map__22398","G__22407","shadow.test/run-tests","shadow.test.run_tests","shadow.test.env/get-test-namespaces","namespaces","cljs.core/set?","shadow.test.env/get-test-vars","p1__22402#","cljs.core/contains?","G__22412","shadow.test/run-all-tests","shadow.test.run_all_tests","re","p1__22410#","or__5045__auto__","cljs.core/re-matches"],"sourcesContent":["(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(defn test-vars-grouped-block\n  \"like ct/test-vars-block but more generic\n   groups vars by namespace, executes fixtures\"\n  [vars]\n  (->> vars\n       (group-by #(-> % meta :ns))\n       ;; more predictable test ordering\n       ;; FIXME: should maybe also allow randomizing to detect tests that rely on call order\n       (sort-by first)\n       (mapcat (fn [[ns vars]]\n                 [(fn []\n                    (ct/report {:type :begin-test-ns :ns ns}))\n                  ;; FIXME: this is too complex, should simplify\n                  (fn []\n                    (ct/block\n                      (let [env (ct/get-current-env)\n                            once-fixtures (get-in env [:once-fixtures ns])\n                            each-fixtures (get-in env [:each-fixtures ns])]\n                        (case (ct/execution-strategy once-fixtures each-fixtures)\n                          :async\n                          (->> vars\n                               (filter (comp :test meta))\n                               (mapcat (comp (partial ct/wrap-map-fixtures each-fixtures)\n                                         ct/test-var-block))\n                               (ct/wrap-map-fixtures once-fixtures))\n                          :sync\n                          (let [each-fixture-fn (ct/join-fixtures each-fixtures)]\n                            [(fn []\n                               ((ct/join-fixtures once-fixtures)\n                                (fn []\n                                  (doseq [v vars]\n                                    (when-let [t (:test (meta v))]\n                                      ;; (alter-meta! v update :test disable-async)\n                                      (each-fixture-fn\n                                        (fn []\n                                          ;; (test-var v)\n                                          (ct/run-block\n                                            (ct/test-var-block* v (ct/disable-async t))))))))))])))))\n                  (fn []\n                    (ct/report {:type :end-test-ns :ns ns}))])\n         )))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([ns]\n   {:pre [(symbol? ns)]}\n   (let [{:keys [vars] :as test-ns} (env/get-test-ns-info ns)]\n\n     (if-not test-ns\n       [(fn []\n          (println (str \"Namespace: \" ns \" not found, no tests to run.\")))]\n       (test-vars-grouped-block vars)))))\n\n(defn prepare-test-run [{:keys [report-fn] :as env} vars]\n  (let [orig-report ct/report]\n    [(fn []\n       (ct/set-env! (assoc env ::report-fn orig-report))\n\n       (when report-fn\n         (set! ct/report report-fn))\n\n       ;; setup all known fixtures\n       (doseq [[test-ns ns-info] (env/get-tests)\n               :let [{:keys [fixtures]} ns-info]]\n         (when-let [fix (:once fixtures)]\n           (ct/update-current-env! [:once-fixtures] assoc test-ns fix))\n\n         (when-let [fix (:each fixtures)]\n           (ct/update-current-env! [:each-fixtures] assoc test-ns fix)))\n\n       ;; just in case report-fn wants to know when things starts\n       (ct/report {:type :begin-run-tests\n                   :var-count (count vars)\n                   :ns-count (->> vars\n                                  (map #(-> % meta :ns))\n                                  (set)\n                                  (count))}))]))\n\n(defn finish-test-run [block]\n  {:pre [(vector? block)]}\n  (conj block\n    (fn []\n      (let [{::keys [report-fn] :keys [report-counters] :as env} (ct/get-current-env)]\n        (ct/report (assoc report-counters :type :summary))\n        (ct/report (assoc report-counters :type :end-run-tests))\n        (set! ct/report report-fn)\n        ))))\n\n;; API Fns\n\n(defn run-test-vars\n  \"tests all vars grouped by namespace, expects seq of test vars, can be obtained from env\"\n  ([test-vars]\n   (run-test-vars (ct/empty-env) test-vars))\n  ([env vars]\n   (-> (prepare-test-run env vars)\n       (into (test-vars-grouped-block vars))\n       (finish-test-run)\n       (ct/run-block))))\n\n(defn test-ns\n  \"test all vars for given namespace symbol\"\n  ([ns]\n   (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (let [{:keys [vars]} (env/get-test-ns-info ns)]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-tests\n  \"test all vars in specified namespace symbol set\"\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   {:pre [(set? namespaces)]}\n   (let [vars (->> (env/get-test-vars)\n                   (filter #(contains? namespaces (-> % meta :ns))))]\n     (-> (prepare-test-run env vars)\n         (into (test-vars-grouped-block vars))\n         (finish-test-run)\n         (ct/run-block)))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into #{})))))\n"]}