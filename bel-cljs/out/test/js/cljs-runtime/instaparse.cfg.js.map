{"version":3,"sources":["instaparse/cfg.cljc"],"mappings":"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","names":["instaparse.cfg/*case-insensitive-literals*","instaparse.cfg/string+","s","ci-by-default?","G__24411","cljs.core._EQ_","js/Error","instaparse.combinators-source/string-ci","instaparse.combinators-source/string","instaparse.cfg/regex-doc","pattern-str","comment","cljs.core/re-pattern","instaparse.cfg/single-quoted-string","instaparse.cfg/single-quoted-regexp","instaparse.cfg/double-quoted-string","instaparse.cfg/double-quoted-regexp","instaparse.cfg/inside-comment","instaparse.cfg/ws","instaparse.cfg/opt-whitespace","instaparse.combinators-source/hide","instaparse.combinators-source/nt","instaparse.cfg/cfg","instaparse.reduction.apply_standard_reductions","instaparse.combinators-source/hide-tag","instaparse.combinators_source.cat","instaparse.combinators-source/plus","instaparse.combinators-source/regexp","instaparse.combinators-source/star","instaparse.combinators_source.alt","instaparse.combinators-source/neg","instaparse.cfg/tag","cljs.core/first","instaparse.cfg/contents","cljs.core/next","instaparse.cfg/content","cljs.core/fnext","instaparse.cfg/escape","sq","cljs.core/seq","v","temp__5802__auto__","c","G__24460","c2","cljs.core/second","cljs.core.drop","cljs.core.conj","instaparse.util.throw_runtime_exception","cljs.core.apply","cljs.core/str","cljs.core/deref","cljs.tools.reader/read-string*","read-string*","instaparse.cfg/safe-read-string","G__24463","G__24464","G__24465","G__24466","cljs.tools.reader.reader_types.string_push_back_reader","instaparse.cfg/process-string","stripped","cljs.core.subs","cljs.core/count","remove-escaped-single-quotes","final-string","instaparse.cfg/process-regexp","instaparse.cfg/build-rule","tree","G__24484","cljs.core/Keyword","vec__24485","cljs.core.nth","nt","alt-or-ord","cljs.core.keyword","G__24489","instaparse.combinators-source/alt","cljs.core.map","instaparse.combinators-source/ord","G__24491","instaparse.combinators-source/cat","instaparse.combinators-source/opt","G__24492","G__24493","G__24494","instaparse.combinators-source/look","G__24500","G__24504","instaparse.combinators-source/Epsilon","instaparse.cfg/seq-nt","parser","G__24508","cljs.core.mapcat","instaparse.cfg/check-grammar","grammar-map","valid-nts","cljs.core/set","cljs.core/keys","seq__24513","chunk__24514","count__24515","i__24516","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core.distinct","cljs.core/vals","instaparse.cfg/build-parser","spec","output-format","rules","instaparse.gll/parse","instaparse.gll/Failure","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__24523","cljs.core/*print-newline*","*print-fn*-orig-val__24524","cljs.core/*print-fn*","*print-newline*-temp-val__24525","*print-fn*-temp-val__24526","x__5691__auto__","cljs.core.println","productions","start-production","cljs.core.into","instaparse.cfg/build-parser-from-combinators","instaparse.util.throw_illegal_argument_exception","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","instaparse.cfg/ebnf","p__24541","map__24542","cljs.core/--destructure-map","seq24535","G__24536","self__5754__auto__","opts","*case-insensitive-literals*-orig-val__24543","*case-insensitive-literals*-temp-val__24544","*print-newline*-orig-val__24546","*print-fn*-orig-val__24547","*print-newline*-temp-val__24548","*print-fn*-temp-val__24549","cljs.core/ffirst"],"sourcesContent":["(ns instaparse.cfg\r\n  \"This is the context free grammar that recognizes context free grammars.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.combinators-source :refer\r\n             [Epsilon opt plus star rep alt ord cat string-ci string\r\n              string-ci regexp nt look neg hide hide-tag]]\r\n            [instaparse.reduction :refer [apply-standard-reductions]]\r\n            [instaparse.gll :refer [parse]]\r\n            [instaparse.util :refer [throw-illegal-argument-exception\r\n                                     throw-runtime-exception]]\r\n            [clojure.string :as str]\r\n            #?(:cljs [cljs.tools.reader :as reader])\r\n            #?(:cljs [cljs.tools.reader.reader-types :as readers])))\r\n\r\n(def ^:dynamic *case-insensitive-literals*\r\n  \"Sets whether all string literal terminals in a built grammar\r\n  will be treated as case insensitive.\r\n\r\n  `true`: case-insensitive\r\n  `false`: case-sensitive\r\n  `:default`: case-sensitive for EBNF, case-insensitive for ABNF\"\r\n  :default)\r\n\r\n(defn string+\r\n  \"Returns a string combinator that may be case-insensntive, based\r\n  on (in priority order):\r\n\r\n  1) the value of `*case-insensitive-literals*`, if it has been\r\n  overridden to a boolean\r\n  2) the supplied `ci-by-default?` parameter\"\r\n  [s ci-by-default?]\r\n  (case *case-insensitive-literals*\r\n    true (string-ci s)\r\n    false (string s)\r\n    :default (if ci-by-default? (string-ci s) (string s))))\r\n\r\n(defn regex-doc\r\n  \"Adds a comment to a Clojure regex, or no-op in ClojureScript\"\r\n  [pattern-str comment]\r\n  #?(:clj (re-pattern (str pattern-str \"(?x) #\" comment))\r\n     :cljs (re-pattern pattern-str)))\r\n\r\n(def single-quoted-string (regex-doc #\"'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\" \"Single-quoted string\"))\r\n(def single-quoted-regexp (regex-doc #\"#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\" \"Single-quoted regexp\"))\r\n(def double-quoted-string (regex-doc #\"\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\" \"Double-quoted string\"))\r\n(def double-quoted-regexp (regex-doc #\"#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\" \"Double-quoted regexp\"))\r\n(def inside-comment #?(:clj #\"(?s)(?:(?!(?:\\(\\*|\\*\\))).)*(?x) #Comment text\"\r\n                       :cljs #\"(?:(?!(?:\\(\\*|\\*\\)))[\\s\\S])*\"))\r\n(def ws (regex-doc \"[,\\\\s]*\" \"optional whitespace\"))\r\n\r\n(def opt-whitespace (hide (nt :opt-whitespace)))\r\n\r\n(def cfg\r\n  (apply-standard-reductions\r\n    :hiccup    ; use the hiccup output format\r\n    {:rules (hide-tag (cat opt-whitespace\r\n                           (plus (nt :rule))))\r\n     :comment (cat (string \"(*\") (nt :inside-comment) (string \"*)\"))\r\n     :inside-comment (cat (regexp inside-comment)\r\n                          (star (cat (nt :comment)\r\n                                     (regexp inside-comment))))\r\n     :opt-whitespace (cat (regexp ws)\r\n                          (star (cat (nt :comment)\r\n                                     (regexp ws))))\r\n     :rule-separator (alt (string \":\")\r\n                          (string \":=\")\r\n                          (string \"::=\")\r\n                          (string \"=\"))\r\n     :rule (cat (alt (nt :nt)\r\n                     (nt :hide-nt))\r\n                opt-whitespace\r\n                (hide (nt :rule-separator))\r\n                opt-whitespace\r\n                (nt :alt-or-ord)\r\n                (hide (alt (nt :opt-whitespace)\r\n                           (cat (nt :opt-whitespace) (alt (string \";\") (string \".\")) (nt :opt-whitespace)))))\r\n     :nt (cat\r\n           (neg (nt :epsilon))\r\n           (regexp\r\n             (regex-doc \"[^, \\\\r\\\\t\\\\n<>(){}\\\\[\\\\]+*?:=|'\\\"#&!;./]+\" \"Non-terminal\")))\r\n          :hide-nt (cat (hide (string \"<\"))\r\n                        opt-whitespace\r\n                        (nt :nt)\r\n                        opt-whitespace\r\n                        (hide (string \">\")))\r\n          :alt-or-ord (hide-tag (alt (nt :alt) (nt :ord)))\r\n          :alt (cat (nt :cat)\r\n                    (star\r\n                      (cat\r\n                        opt-whitespace\r\n                        (hide (string \"|\"))\r\n                        opt-whitespace\r\n                        (nt :cat))))\r\n          :ord (cat (nt :cat)\r\n                    (plus\r\n                      (cat\r\n                        opt-whitespace\r\n                        (hide (string \"/\"))\r\n                        opt-whitespace\r\n                        (nt :cat))))\r\n          :paren (cat (hide (string \"(\"))\r\n                      opt-whitespace\r\n                      (nt :alt-or-ord)\r\n                      opt-whitespace\r\n                      (hide (string \")\")))\r\n          :hide (cat (hide (string \"<\"))\r\n                     opt-whitespace\r\n                     (nt :alt-or-ord)\r\n                     opt-whitespace\r\n                     (hide (string \">\")))\r\n          :cat (plus (cat\r\n                       opt-whitespace\r\n                       (alt (nt :factor) (nt :look) (nt :neg))\r\n                       opt-whitespace))\r\n          :string (alt\r\n                    (regexp single-quoted-string)\r\n                    (regexp double-quoted-string))\r\n          :regexp (alt\r\n                    (regexp single-quoted-regexp)\r\n                    (regexp double-quoted-regexp))\r\n          :opt (alt\r\n                 (cat (hide (string \"[\"))\r\n                      opt-whitespace\r\n                      (nt :alt-or-ord)\r\n                      opt-whitespace\r\n                      (hide (string \"]\")))\r\n                 (cat (nt :factor)\r\n                      opt-whitespace\r\n                      (hide (string \"?\"))))\r\n          :star (alt\r\n                  (cat (hide (string \"{\"))\r\n                       opt-whitespace\r\n                       (nt :alt-or-ord)\r\n                       opt-whitespace\r\n                       (hide (string \"}\")))\r\n                  (cat (nt :factor)\r\n                       opt-whitespace\r\n                       (hide (string \"*\"))))\r\n          :plus (cat (nt :factor)\r\n                     opt-whitespace\r\n                     (hide (string \"+\")))\r\n          :look (cat (hide (string \"&\"))\r\n                     opt-whitespace\r\n                     (nt :factor))\r\n          :neg (cat (hide (string \"!\"))\r\n                    opt-whitespace\r\n                    (nt :factor))\r\n          :epsilon (alt (string \"Epsilon\")\r\n                        (string \"epsilon\")\r\n                        (string \"EPSILON\")\r\n                        (string \"eps\")\r\n                        (string \"\\u03b5\"))\r\n          :factor (hide-tag (alt (nt :nt)\r\n                                 (nt :string)\r\n                                 (nt :regexp)\r\n                                 (nt :opt)\r\n                                 (nt :star)\r\n                                 (nt :plus)\r\n                                 (nt :paren)\r\n                                 (nt :hide)\r\n                                 (nt :epsilon)))\r\n     ;; extra entrypoint to be used by the ebnf combinator\r\n     :rules-or-parser (hide-tag (alt (nt :rules) (nt :alt-or-ord)))}))\r\n\r\n; Internally, we're converting the grammar into a hiccup parse tree\r\n; Here's how you extract the relevant information\r\n(def tag first)\r\n(def contents next)\r\n(def content fnext)\r\n\r\n;;;; Helper functions for reading strings and regexes\r\n\r\n(defn escape\r\n  \"Converts escaped single-quotes to unescaped, and unescaped double-quotes to escaped\"\r\n  [s]\r\n  (loop [sq (seq s), v []]\r\n    (if-let [c (first sq)]\r\n      (case c\r\n        \\\\ (if-let [c2 (second sq)]\r\n             (if (= c2 \\')\r\n               (recur (drop 2 sq) (conj v c2))\r\n               (recur (drop 2 sq) (conj v c c2)))\r\n             (throw-runtime-exception\r\n               \"Encountered backslash character at end of string: \" s))\r\n        \\\" (recur (next sq) (conj v \\\\ \\\"))\r\n        (recur (next sq) (conj v c)))\r\n      (apply str v))))\r\n\r\n;(defn safe-read-string [s]\r\n;  (binding [*read-eval* false]\r\n;    (read-string s)))\r\n\r\n#?(:clj\r\n   (defn wrap-reader [reader]\r\n     (let [{major :major minor :minor} *clojure-version*]\r\n       (if (and (<= major 1) (<= minor 6))\r\n         reader\r\n         (fn [r s] (reader r s {} (java.util.LinkedList.)))))))\r\n\r\n#?(:clj\r\n   (let [string-reader (wrap-reader\r\n                        (clojure.lang.LispReader$StringReader.))]\r\n     (defn safe-read-string\r\n       \"Expects a double-quote at the end of the string\"\r\n       [s]\r\n       (with-in-str s (string-reader *in* nil))))\r\n\r\n   :cljs\r\n   (let [read-string* @#'reader/read-string*] ;; since read-string* is private\r\n     (defn safe-read-string [s]\r\n       (read-string* (readers/string-push-back-reader s) nil nil nil))))\r\n\r\n; I think re-pattern is sufficient, but here's how to do it without.\r\n;(let [regexp-reader (clojure.lang.LispReader$RegexReader.)]\r\n;  (defn safe-read-regexp\r\n;    \"Expects a double-quote at the end of the string\"\r\n;    [s]\r\n;    (with-in-str s (regexp-reader *in* nil))))\r\n\r\n(defn process-string\r\n  \"Converts single quoted string to double-quoted\"\r\n  [s]\r\n  (let [stripped\r\n        (subs s 1 (dec (count s)))\r\n        remove-escaped-single-quotes\r\n        (escape stripped)\r\n        final-string\r\n        (safe-read-string (str remove-escaped-single-quotes \\\"))]\r\n\r\n    final-string))\r\n\r\n(defn process-regexp\r\n  \"Converts single quoted regexp to double-quoted\"\r\n  [s]\r\n  ;(println (with-out-str (pr s)))\r\n  (let [stripped\r\n        (subs s 2 (dec (count s)))\r\n        remove-escaped-single-quotes\r\n        (escape stripped)\r\n        final-string\r\n        (re-pattern remove-escaped-single-quotes)]\r\n;        (safe-read-regexp (str remove-escaped-single-quotes \\\"))]\r\n\r\n    final-string))\r\n\r\n;;; Now we need to convert the grammar's parse tree into combinators\r\n\r\n(defn build-rule\r\n  \"Convert one parsed rule from the grammar into combinators\"\r\n  [tree]\r\n  (case (tag tree)\r\n    :rule (let [[nt alt-or-ord] (contents tree)]\r\n            (if (= (tag nt) :hide-nt)\r\n              [(keyword (content (content nt)))\r\n               (hide-tag (build-rule alt-or-ord))]\r\n              [(keyword (content nt))\r\n               (build-rule alt-or-ord)]))\r\n    :nt (nt (keyword (content tree)))\r\n    :alt (apply alt (map build-rule (contents tree)))\r\n    :ord (apply ord (map build-rule (contents tree)))\r\n    :paren (recur (content tree))\r\n    :hide (hide (build-rule (content tree)))\r\n    :cat (apply cat (map build-rule (contents tree)))\r\n    :string (string+ (process-string (content tree)) false)\r\n    :regexp (regexp (process-regexp (content tree)))\r\n    :opt (opt (build-rule (content tree)))\r\n    :star (star (build-rule (content tree)))\r\n    :plus (plus (build-rule (content tree)))\r\n    :look (look (build-rule (content tree)))\r\n    :neg (neg (build-rule (content tree)))\r\n    :epsilon Epsilon))\r\n\r\n(defn seq-nt\r\n  \"Returns a sequence of all non-terminals in a parser built from combinators.\"\r\n  [parser]\r\n  (case (:tag parser)\r\n    :nt [(:keyword parser)]\r\n    (:string :string-ci :char :regexp :epsilon) []\r\n    (:opt :plus :star :look :neg :rep) (recur (:parser parser))\r\n    (:alt :cat) (mapcat seq-nt (:parsers parser))\r\n    :ord (mapcat seq-nt\r\n                 [(:parser1 parser) (:parser2 parser)])))\r\n\r\n(defn check-grammar\r\n  \"Throw error if grammar uses any invalid non-terminals in its productions\"\r\n  [grammar-map]\r\n  (let [valid-nts (set (keys grammar-map))]\r\n    (doseq [nt (distinct (mapcat seq-nt (vals grammar-map)))]\r\n      (when-not (valid-nts nt)\r\n        (throw-runtime-exception\r\n          (subs (str nt) 1)\r\n          \" occurs on the right-hand side of your grammar, but not on the left\"))))\r\n  grammar-map)\r\n\r\n(defn build-parser [spec output-format]\r\n  (let [rules (parse cfg :rules spec false)]\r\n    (if (instance? instaparse.gll.Failure rules)\r\n      (throw-runtime-exception\r\n        \"Error parsing grammar specification:\\n\"\r\n        (with-out-str (println rules)))\r\n      (let [productions (map build-rule rules)\r\n            start-production (first (first productions))]\r\n        {:grammar (check-grammar (apply-standard-reductions output-format (into {} productions)))\r\n         :start-production start-production\r\n         :output-format output-format}))))\r\n\r\n(defn build-parser-from-combinators [grammar-map output-format start-production]\r\n  (if (nil? start-production)\r\n    (throw-illegal-argument-exception\r\n      \"When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument.\")\r\n    {:grammar (check-grammar (apply-standard-reductions output-format grammar-map))\r\n     :start-production start-production\r\n     :output-format output-format}))\r\n\r\n(defn ebnf\r\n  \"Takes an EBNF grammar specification string and returns the combinator version.\r\nIf you give it the right-hand side of a rule, it will return the combinator equivalent.\r\nIf you give it a series of rules, it will give you back a grammar map.\r\nUseful for combining with other combinators.\"\r\n  [spec & {:as opts}]\r\n  (binding [*case-insensitive-literals* (:string-ci opts :default)]\r\n    (let [rules (parse cfg :rules-or-parser spec false)]\r\n      (cond\r\n        (instance? instaparse.gll.Failure rules)\r\n        (throw-runtime-exception\r\n          \"Error parsing grammar specification:\\n\"\r\n          (with-out-str (println rules)))\r\n        (= :rule (ffirst rules))\r\n        (into {} (map build-rule rules))\r\n\r\n        :else (build-rule (first rules))))))\r\n"]}