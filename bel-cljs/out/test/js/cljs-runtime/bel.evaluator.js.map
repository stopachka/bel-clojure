{"version":3,"sources":["bel/evaluator.cljs"],"mappings":"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","names":["bel.evaluator/stack-pop","x","cljs.core/List","cljs.core/peek","cljs.core/pop","bel.evaluator/stack-pop-2","bel.evaluator/stack-pop-until-breakpoint","breakpoint","peeks","pops","cljs.core/empty?","cljs.core._EQ_","cljs.core.conj","bel.evaluator/in-where?","es","cljs.core/second","bel.evaluator/b-where","rs","env","bel.evaluator/env-pair","sym","v","js/Error","bel.model/bel-variable?","bel.model/p","bel.evaluator/not-bel-nil","bel.model/bel-nil","p__28202","map__28203","cljs.core/--destructure-map","cljs.core.get","bel.evaluator/v-pair","dyn","scope","globe","form","cljs.core/some","bel.model/map-get","bel.evaluator/eval-variable","bel.model/bel-globe","bel.model/bel-scope","vp","G__28207","G__28208","bel.model/bel-d","bel.model/cdr","p__28211","map__28212","bel.evaluator/b-thread","env1","cljs.core.assoc","bel.evaluator/env","p__28214","vec__28216","cljs.core.nth","bel.evaluator/eval-dyn-2","_","variable","after","vec__28219","map__28222","ev","rest-rs","bel.model/map-assoc","bel.evaluator/b-dyn","arg","bel.evaluator/eval-cont","_es","_rs","_env","litv","args-head","vec__28225","vec__28228","f","bel.model/car","bel.evaluator/eval-ccc-2","_form","vec__28232","f-evaled","G__28236","G__28237","G__28238","G__28239","bel.model/seq->p","bel.model/bel-lit","bel.model/bel-cont","bel.evaluator/b-ccc","bel.evaluator/b-err","e","G__28241","G__28242","G__28243","G__28244","bel.evaluator/b-debug","cljs.core.println","bel.reader/bel->pretty","bel.evaluator/b-uvar","cljs.core/gensym","bel.evaluator/base-compare","a","b","cljs.core/compare","bel.evaluator/list-compare","c1","c2","bel.evaluator/bel-compare","cljs.core.not_EQ_","G__28247","G__28248","pred__28250","expr__28251","G__28254","G__28255","cljs.core/=","bel.model/type","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","bel.evaluator/b-bin<","seq28256","self__5755__auto__","cljs.core/seq","xs","bel.model/clj-bool->bel","cljs.core.apply","bel.evaluator/wrap-math-fn","bel.evaluator/math-name->fn","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core//","cljs.core/int?","cljs.core/<","p1__28260#","Math/abs","cljs.core/hash","bel.evaluator/prim-name->fn","bel.model/nom","bel.model/id","bel.model/coin","bel.model/xar","bel.model/xdr","bel.model/join","bel.model/sym","cljs.core.merge","bel.evaluator/special-prim-name->fn","bel.evaluator/bel-globe","m","bel.model/mut-map","cljs.core.map","p__28278","vec__28280","k","sym-k","cljs.core.symbol","cljs.core/name","bel.model/map-put","G__28285","G__28286","bel.model/bel-prim","cljs.core.doall","G__28291","bel.evaluator.env","g","p__28298","vec__28299","vec__28302","bel.evaluator/eval-if-2","consequent-form","r","vec__28305","evaled-test-form","bel.model/bel-if","p__28314","vec__28316","bel.evaluator/eval-if-1","test-form","p__28322","map__28323","bel.evaluator/eval-set-2","vec__28326","vec__28329","evaled-v","bel.evaluator/eval-set-1","vec__28335","vec__28338","after-sym","after-v","es'","bel.model/bel-set","p__28349","vec__28352","vec__28355","bel.evaluator/lit-type","_lit","t","p__28361","vec__28363","vec__28366","bel.evaluator/lit-v","_t","p__28372","vec__28375","bel.evaluator/assert-lit","lit","bel.evaluator/bel-nil-args","args","arglist","cljs.core/meta","cljs.core/first","niled-args","cljs.core.map_indexed","i","p__28379","vec__28380","bel.evaluator/eval-prim-simple","n","simple-f","vec__28383","evaled-args","bel.model/p->seq","e28386","G__28389","G__28390","G__28391","G__28392","pred__28393","expr__28394","bel.model/bel-a","js/Object","G__28387","G__28388","bel.model/bel-err-sym","bel.evaluator/eval-prim","special-f","cljs.core.concat","p__28396","vec__28397","bel.evaluator/assign-vars-typecheck-2","vec__28400","check","G__28403","G__28404","G__28405","G__28406","bel.model/quoted-p","bel.model/bel-typecheck-var","p__28407","vec__28408","bel.evaluator/assign-vars-typecheck-1","vec__28411","evaled-f","G__28414","G__28415","G__28416","G__28417","p__28418","vec__28419","bel.evaluator/assign-vars-optional-arg","vec__28422","arg-evaled","p__28425","vec__28426","bel.evaluator/assign-vars-rest","var-head","arg-head","vec__28429","p__28432","p__28433","map__28434","vec__28435","bel.evaluator/assign-vars-1","cljs.core/every?","cljs.core.partial","bel.model/bel-optional?","bel.model/bel-optional-var","bel.model/bel-optional-arg","bel.model/bel-typecheck?","bel.model/bel-typecheck-f","p__28438","vec__28439","bel.evaluator/eval-clo-2","body-head","vec__28442","bel.evaluator/clo-expression-stack","vec__28445","vec__28448","vec__28451","args-sym-head","bel.evaluator/eval-clo","cljs.core/conj","bel.evaluator/eval-mac-2","vec__28454","code","bel.evaluator/eval-mac-1","vec__28457","vec__28460","vec__28463","clo","p__28466","vec__28467","bel.evaluator/eval-lit-1","evaled-lit","vec__28470","pred__28473","expr__28474","bel.model/bel-clo","bel.model/bel-mac","bel.evaluator/eval-many-2","vec__28476","top-ps","evaled-pairs","cljs.core/reverse","p__28479","vec__28480","bel.evaluator/eval-many-1","pairs-to-eval","p","p__28483","vec__28484","bel.evaluator/eval-application-2","vec__28487","evaled","bel.model/number?","G__28491","fexpr__28490","p__28492","vec__28493","bel.evaluator/eval-application-1","bel.evaluator/apply-head->args-head","but-last","cljs.core.drop_last","l","cljs.core/last","ls","bel.model/pair?","p__28496","vec__28497","bel.evaluator/eval-apply-2","vec__28500","evaled-apply-head","G__28503","G__28504","p__28505","vec__28506","bel.evaluator/eval-apply-1","apply-head","p__28509","vec__28510","bel.evaluator/eval-pair","bel.model/bel-quote","bel.model/bel-apply","bel.evaluator/eval-bq-comma-1","vec__28513","vec__28516","r-evaled","h-evaled","bel.evaluator/eval-bq-splice-1","vec__28519","vec__28522","bel.model/p-append","bel.evaluator/eval-bq-pair-1","vec__28525","vec__28528","p__28531","vec__28532","bel.evaluator/eval-bq-rest-1","h","vec__28535","p__28538","vec__28539","bel.evaluator/eval-backquote","vec__28542","h-t","bel.evaluator/literal?","or__5045__auto__","G__28546","fexpr__28545","bel.model/type-nilable","fexpr__28547","bel.model/bel-t","bel.model/bel-o","and__5043__auto__","G__28549","fexpr__28548","bel.model/string?","bel.evaluator/step->fn","bel.evaluator/eval-step","vec__28550","vec__28553","top","rest-es","G__28556","bel.evaluator/debug-loop","tid","cljs.core.comp","cljs.core/println","bel.evaluator/start-thread-command?","cljs.core/seqable?","p__28557","vec__28558","bel.evaluator/start-thread-command->thread","cljs.core.gensym","bel.evaluator/locking?","lock","G__28561","bel.evaluator/eval","threads","vec__28562","seq__28563","first__28564","cljs.core/next","vec__28565","vec__28568","top-thread","rest-threads","top-form","cljs.core.into","vec__28571","rs'","thread'","cljs.core/vec","bel.evaluator/eval-single","bel.evaluator/eval-all","strs","cljs.core.mapv","s","bel.reader/parse"],"sourcesContent":["(ns bel.evaluator\n  (:refer-clojure :exclude [eval])\n  (:require\n   [bel.model :as m]\n   [bel.reader :as r]))\n\n;; ----\n;; Misc\n\n(defn stack-pop [x] (list (peek x) (pop x)))\n\n(defn stack-pop-2 [x]\n  (list (list (peek (pop x)) (peek x))\n        (pop (pop x))))\n\n(defn stack-pop-until-breakpoint [breakpoint x]\n  (loop [peeks ()\n         pops x]\n    (cond\n      (empty? pops) (list peeks pops)\n      (= (peek pops) breakpoint) (list peeks (pop pops))\n      :else\n      (recur\n       (conj peeks (peek pops))\n       (pop pops)))))\n\n;; ------\n;; where\n\n(defn in-where? [es]\n  (= (second (peek es)) [:where]))\n\n(defn b-where [es rs env x]\n  [(conj es\n         [env [:where]]\n         [env x])\n   rs])\n\n;; --------\n;; variable\n\n(defn env-pair [sym v]\n  (assert (m/bel-variable? sym)\n          (str \"expected left-side to be a variable = \" sym))\n  (m/p sym v))\n\n(defn not-bel-nil [x]\n  (when-not (= x m/bel-nil) x))\n\n(defn v-pair [{:keys [dyn scope globe]} form]\n  (let [v (->> [dyn scope globe]\n               (some (fn [x]\n                       (not-bel-nil (m/map-get x form)))))]\n    (assert v\n            (str \"expected value for variable = \" form))\n    v))\n\n(defn eval-variable [es rs env form]\n  (cond\n    (= m/bel-globe form)\n    [es (conj rs (:globe env))]\n\n    (= m/bel-scope form)\n    [es (conj rs (:scope env))]\n\n    :else\n    (let [vp (v-pair env form)]\n      (if (in-where? es)\n        [(pop es)\n         (conj rs\n               (m/p vp (m/p m/bel-d m/bel-nil)))]\n        [es\n         (conj rs (m/cdr vp))]))))\n\n;; ----------\n;; thread\n\n(declare env)\n\n(defn b-thread [es rs {:keys [globe] :as env1} form]\n  [(conj\n    es\n    [env1 [:start-thread (assoc (env) :globe globe) form]])\n   rs])\n\n;; ----\n;; dyn\n\n(defn eval-dyn-2 [es rs env [_ variable after]]\n  (let [[ev rest-rs] (stack-pop rs)\n        {:keys [dyn]} env]\n    [(conj es\n           [(assoc env\n                   :dyn\n                   (m/map-assoc dyn variable (env-pair variable ev)))\n            after])\n     rest-rs]))\n\n(defn b-dyn [es rs env variable arg after]\n  [(conj\n    es\n    [env [:dyn-2 variable after]]\n    [env arg])\n   rs])\n\n;; ----\n;; ccc\n\n(defn eval-cont [_es _rs _env litv args-head]\n  (let [[f] litv\n        [es rs] (f)]\n    [es (conj rs (m/car args-head))]))\n\n(defn eval-ccc-2 [es rs env _form]\n  (let [[f-evaled rest-rs] (stack-pop rs)]\n    [(conj\n      es\n      [env\n       (m/p\n        f-evaled\n        (m/p\n         (m/seq->p [m/bel-lit m/bel-cont (fn [] [es rest-rs])])\n         m/bel-nil))])\n     rest-rs]))\n\n(defn b-ccc [es rs env f]\n  [(conj\n    es\n    [env [:ccc-2]]\n    [env f])\n   rs])\n\n;; ---\n;; err\n\n(defn b-err [_es _rs _env e]\n  [[] [(m/p m/bel-lit (m/p 'error (m/p e m/bel-nil)))]])\n\n;; -----\n;; debug\n\n(defn b-debug\n  [x] (println \"[DEBUG] \" (r/bel->pretty x)))\n\n;; ----\n;; uvar\n\n(def b-uvar gensym)\n\n;; ----\n;; bin<\n\n(declare bel-compare)\n\n(defn base-compare\n  [a b] (compare a b))\n\n(defn list-compare\n  [a b]\n  (let [c1 (m/car a)\n        c2 (m/car b)\n        v (bel-compare c1 c2)]\n    (cond\n      (not= 0 v) v\n      (not= m/bel-nil (m/cdr a)) (bel-compare (m/cdr a) (m/cdr b))\n      :else v)))\n\n(defn bel-compare [a b]\n  (let [f (condp = (m/type a)\n            'pair list-compare\n            base-compare)]\n    (f a b)))\n\n(defn b-bin< [& xs]\n  (m/clj-bool->bel (neg? (apply bel-compare xs))))\n\n;; ----\n;; math\n\n(defn wrap-math-fn [f]\n  (fn [& xs]\n    (let [v (apply f xs)]\n      (if\n       (number? v) v\n       (m/clj-bool->bel v)))))\n\n(def math-name->fn\n  {\"+\" (wrap-math-fn +)\n   \"-\" (wrap-math-fn -)\n   \"*\" (wrap-math-fn *)\n   \"/\" (wrap-math-fn /)\n   \"int\" (wrap-math-fn int?)\n   \"num<\" (wrap-math-fn <)\n   \"abs\" (wrap-math-fn #(Math/abs %))\n   \"hash\" (wrap-math-fn hash)})\n\n;; ------------\n;; simple-prims\n\n(def prim-name->fn\n  (merge\n   {\"id\" #'m/id\n    \"car\" #'m/car\n    \"cdr\" #'m/cdr\n    \"join\" #'m/join\n    \"type\" #'m/type\n    \"xar\" #'m/xar\n    \"xdr\" #'m/xdr\n    \"sym\" #'m/sym\n    \"nom\" #'m/nom\n    \"coin\" #'m/coin\n    \"debug\" #'b-debug\n    \"uvar\" #'b-uvar\n    \"bin<\" #'b-bin<\n    \"map-assoc\" #'m/map-assoc}\n   math-name->fn))\n\n;; -------------\n;; special-prims\n\n(def special-prim-name->fn\n  {\"dyn\" #'b-dyn\n   \"ccc\" #'b-ccc\n   \"where\" #'b-where\n   \"err\" #'b-err\n   \"thread\" #'b-thread})\n\n;; ---\n;; Env\n\n(defn bel-globe []\n  (let [m (m/mut-map)]\n    (->> (merge prim-name->fn special-prim-name->fn)\n         (map (fn [[k]]\n                (let [sym-k (symbol (name k))]\n                  (m/map-put\n                   m\n                   sym-k\n                   (m/p\n                    sym-k\n                    (m/seq->p [m/bel-lit m/bel-prim sym-k]))))))\n         doall)\n    m))\n\n(defn env\n  ([] (env (bel-globe)))\n  ([g]\n   {:globe g\n    :scope m/bel-nil\n    :dyn m/bel-nil}))\n\n;; ------------\n;; eval-if\n\n(defn eval-if-2 [es rs env [_ [consequent-form r]]]\n  (let [[evaled-test-form rest-rs] (stack-pop rs)]\n    [(conj es\n           (cond\n             (not= m/bel-nil evaled-test-form)\n             [env consequent-form]\n\n             (= m/bel-nil r)\n             [env r]\n\n             (= m/bel-nil (m/cdr r))\n             [env (m/car r)]\n             :else\n             [env\n              (m/p m/bel-if r)]))\n     rest-rs]))\n\n(defn eval-if-1 [es rs env [test-form r]]\n  [(conj es\n         [env [:if-2 r]]\n         [env test-form])\n   rs])\n\n;; ------------\n;; eval-set\n\n(defn eval-set-2 [es rs {:keys [globe] :as _env} form]\n  (let [[_ sym] form\n        [evaled-v rest-rs] (stack-pop rs)]\n    (m/map-put\n     globe\n     sym\n     (env-pair sym evaled-v))\n    [es rest-rs]))\n\n(defn eval-set-1 [es rs env form]\n  (let [[sym after-sym] form\n        _ (assert (not= m/bel-nil after-sym)\n                  \"Set sym needs a value\")\n        [v after-v] after-sym\n        es' (if (not= after-v m/bel-nil)\n              (conj es [env (m/p m/bel-set after-v)])\n              es)]\n    [(conj es'\n           [env [:set-2 sym]]\n           [env v])\n     rs]))\n\n;; eval-application\n;; --------------------\n\n(defn lit-type [[_lit [t]]] t)\n\n(defn lit-v [[_lit [_t v]]] v)\n\n(defn assert-lit [[lit :as form]]\n  (assert (= m/bel-lit lit)\n          (str\n           \"expected lit expression got form = \" form))\n  form)\n\n;; -------------\n;; eval-prim\n\n(defn bel-nil-args [f args]\n  (let [arglist (->> f meta :arglists first)\n        niled-args (if arglist\n                     (map-indexed (fn [i _] (nth args i m/bel-nil)) arglist)\n                     args)]\n    niled-args))\n\n(defn eval-prim-simple [es rs env [_ n simple-f]]\n  (let [[evaled-args rest-rs] (stack-pop rs)\n        args (m/p->seq evaled-args)]\n    (try\n      (if (in-where? es)\n        [(pop es)\n         (conj rs\n               (m/p\n                (m/car evaled-args)\n                (m/p\n                 (condp = n\n                   \"car\" m/bel-a\n                   \"cdr\" m/bel-d\n                   (throw (js/Error. \"unexpected use of where\")))\n                 m/bel-nil)))]\n\n        [es\n         (conj rest-rs\n               (apply simple-f\n                      (bel-nil-args simple-f args)))])\n      (catch js/Object e\n        [(conj es [env (m/p\n                        m/bel-err-sym\n                        (m/p e m/bel-nil))])\n         rest-rs]))))\n\n(defn eval-prim [es rs env litv args-head]\n  (let [n (name (m/car litv))\n        simple-f (prim-name->fn n)\n        special-f (special-prim-name->fn n)]\n    (if simple-f\n      [(conj es\n             [env [:eval-prim-simple n simple-f]]\n             [env [:eval-many-1 args-head]])\n       rs]\n      (apply special-f\n             (bel-nil-args\n              special-f\n              (concat [es rs env]\n                      (m/p->seq args-head)))))))\n\n;; -----------\n;; assign-vars\n\n(defn assign-vars-typecheck-2 [es rs env [_ variable arg]]\n  (let [[check rest-rs] (stack-pop rs)]\n    (if (= m/bel-nil check)\n      [(conj es\n             [env (m/p\n                   m/bel-err-sym\n                   (m/p (m/quoted-p 'mistype)\n                        m/bel-nil))])\n       rs]\n      [(conj es\n             [env\n              [:assign-vars-1\n               (m/bel-typecheck-var variable)\n               arg]])\n       rest-rs])))\n\n(defn assign-vars-typecheck-1 [es rs env [_ variable arg]]\n  (let [[evaled-f rest-rs] (stack-pop rs)]\n    [(conj es\n           [env [:assign-vars-typecheck-2 variable arg]]\n           [env (m/p\n                 evaled-f\n                 (m/p (m/quoted-p arg)\n                      m/bel-nil))])\n     rest-rs]))\n\n(defn assign-vars-optional-arg [es rs env [_ variable]]\n  (let [[arg-evaled rest-rs] (stack-pop rs)]\n    [(conj es\n           [env [:assign-vars-1 variable arg-evaled]])\n     rest-rs]))\n\n(defn assign-vars-rest [es rs env [_ var-head arg-head]]\n  (let [[scope rest-rs] (stack-pop rs)]\n    [(conj es\n           [(assoc env :scope scope)\n            [:assign-vars-1 var-head arg-head]])\n     rest-rs]))\n\n(defn assign-vars-1 [es rs {:keys [scope] :as env} [_ var-head arg-head]]\n  (cond\n    (every? (partial = m/bel-nil) [var-head arg-head])\n    [es (conj rs scope)]\n\n    (m/bel-variable? var-head)\n    [es (conj rs\n              (m/map-assoc\n               scope\n               var-head\n               (env-pair\n                var-head\n                arg-head)))]\n\n    (m/bel-optional? var-head)\n    (if (= m/bel-nil arg-head)\n      [(conj es\n             [env [:assign-vars-optional-arg\n                   (m/bel-optional-var var-head)]]\n             [env (m/bel-optional-arg var-head)])\n\n       rs]\n      [(conj es\n             [env [:assign-vars-1\n                   (m/bel-optional-var var-head) arg-head]])\n       rs])\n    (m/bel-typecheck? var-head)\n    [(conj es\n           [env [:assign-vars-typecheck-1 var-head arg-head]]\n           [env (m/bel-typecheck-f var-head)])\n     rs]\n    :else\n    [(conj es\n           [env [:assign-vars-rest\n                 (m/cdr var-head) (m/cdr arg-head)]]\n           [env [:assign-vars-1\n                 (m/car var-head) (m/car arg-head)]])\n     rs]))\n\n;; ------------\n;; eval-clo\n\n(defn eval-clo-2 [es rs env [_ body-head]]\n  (let [[scope rest-rs] (stack-pop rs)]\n    [(conj es\n           [(assoc env :scope scope) body-head])\n     rest-rs]))\n\n(defn clo-expression-stack [env litv args-head]\n  (let [[scope [args-sym-head [body-head]]] litv]\n    [[env [:eval-clo-2 body-head]]\n     [(assoc env :scope scope)\n      [:assign-vars-1 args-sym-head args-head]]]))\n\n(defn eval-clo [es rs env litv args-head]\n  [(apply conj (concat [es] (clo-expression-stack env litv args-head)))\n   rs])\n\n;; ------------\n;; eval-mac\n\n(defn eval-mac-2 [es rs env _form]\n  (let [[code rest-rs] (stack-pop rs)]\n    [(conj es [env code])\n     rest-rs]))\n\n(defn eval-mac-1 [es rs env litv args-head]\n  (let [[[_ [_ clo]]] litv]\n    [(apply conj\n            (concat [es\n                     [env [:eval-mac-2]]]\n                    (clo-expression-stack env clo args-head)))\n     rs]))\n\n;; ------------\n;; eval-lit\n\n(defn eval-lit-1 [es rs env [_ evaled-lit]]\n  (let [[args-head rest-rs] (stack-pop rs)\n        litv (lit-v evaled-lit)]\n    (condp = (lit-type evaled-lit)\n      m/bel-prim\n      (eval-prim es rest-rs env litv args-head)\n      m/bel-clo\n      (eval-clo es rest-rs env litv args-head)\n      m/bel-mac\n      (eval-mac-1 es rest-rs env litv args-head)\n      m/bel-cont\n      (eval-cont es rest-rs env litv args-head))))\n\n;; --------------\n;; eval-many\n\n(defn eval-many-2 [es rs _env _form]\n  (let [[top-ps rest-rs] (stack-pop-until-breakpoint :eval-many-breakpoint rs)\n        evaled-pairs (m/seq->p (reverse top-ps))]\n    [es (conj rest-rs evaled-pairs)]))\n\n(defn eval-many-1 [es rs env [_ args-head]]\n  (let [pairs-to-eval (m/p->seq args-head)]\n    [(apply\n      conj\n      (concat\n       [es [env [:eval-many-2]]]\n       (map (fn [p] [env p]) pairs-to-eval)))\n     (conj rs :eval-many-breakpoint)]))\n\n;; --------------------\n;; eval-application\n\n(defn eval-application-2 [es rs env [_ args-head]]\n  (let [[evaled rest-rs] (stack-pop rs)]\n    (if (m/number? evaled)\n      [(conj es\n             [env [:eval-lit-1 (m/cdr (v-pair env 'nth))]]\n             [env [:eval-many-1 (m/p evaled args-head)]])\n       rest-rs]\n      (let [evaled-lit (assert-lit evaled)\n            es' (conj es [env [:eval-lit-1 evaled-lit]])]\n        (if (#{m/bel-mac m/bel-prim}\n             (lit-type evaled-lit))\n          [es' (conj rest-rs args-head)]\n          [(conj es'\n                 [env [:eval-many-1 args-head]])\n           rest-rs])))))\n\n(defn eval-application-1 [es rs env [f args-head :as _form]]\n  [(conj es\n         [env [:application-2 args-head]]\n         [env f])\n   rs])\n\n;; eval-apply\n;; -------------\n\n(defn apply-head->args-head [x]\n  (let [xs (m/p->seq x)\n        but-last (drop-last xs)\n        l (last xs)\n        ls (if (m/pair? l)\n             (m/p->seq l)\n             [l])]\n    (->> (concat but-last ls)\n         (map m/quoted-p)\n         m/seq->p)))\n\n(defn eval-apply-2 [es rs env [_ f]]\n  (let [[evaled-apply-head rest-rs] (stack-pop rs)]\n    [(conj\n      es\n      [env (m/p\n            f (apply-head->args-head evaled-apply-head))])\n     rest-rs]))\n\n(defn eval-apply-1 [es rs env [f apply-head :as _form]]\n  [(conj\n    es\n    [env [:eval-apply-2 f]]\n    [env [:eval-many-1 apply-head]])\n   rs])\n\n;; -------------\n;; eval-pair\n\n(defn eval-pair [es rs env [l r :as form]]\n  (cond\n    (= m/bel-quote l) [es (conj rs (m/car r))]\n    (= m/bel-set l) (eval-set-1 es rs env r)\n    (= m/bel-if l) (eval-if-1 es rs env r)\n    (= m/bel-apply l) (eval-apply-1 es rs env r)\n    :else (eval-application-1 es rs env form)))\n\n;; ------------------\n;; eval-backquote\n\n(defn eval-bq-comma-1 [es rs _env _form]\n  (let [[[r-evaled h-evaled] rest-rs] (stack-pop-2 rs)]\n    [es\n     (conj\n      rest-rs\n      (m/p\n       h-evaled\n       r-evaled))]))\n\n(defn eval-bq-splice-1 [es rs _env _form]\n  (let [[[r-evaled h-evaled] rest-rs] (stack-pop-2 rs)]\n    [es\n     (conj\n      rest-rs\n      (m/p-append\n       h-evaled\n       r-evaled))]))\n\n(defn eval-bq-pair-1 [es rs _env _form]\n  (let [[[r-evaled h-evaled] rest-rs] (stack-pop-2 rs)]\n    [es\n     (conj\n      rest-rs\n      (m/p\n       h-evaled\n       r-evaled))]))\n\n(defn eval-bq-rest-1 [es rs _env [_ h]]\n  (let [[r-evaled rest-rs] (stack-pop rs)]\n    [es\n     (conj\n      rest-rs\n      (m/p\n       h\n       r-evaled))]))\n\n(defn eval-backquote [es rs env [_ form]]\n  (let [t (m/type form)]\n    (cond\n      (= t 'comma)\n      [(conj es [env (second form)])\n       rs]\n\n      (not= t 'pair)\n      [es (conj rs form)]\n\n      :else\n      (let [[h r] form\n            h-t (m/type h)]\n        (cond\n          (= h-t 'comma)\n          [(conj\n            es\n            [env [:eval-bq-comma-1]]\n            [env (second h)]\n            [env [:backquote r]])\n           rs]\n          (= h-t 'splice)\n          [(conj\n            es\n            [env [:eval-bq-splice-1]]\n            [env (second h)]\n            [env [:backquote r]])\n           rs]\n          (= h-t 'pair)\n          [(conj es\n                 [env [:eval-bq-pair-1]]\n                 [env [:backquote h]]\n                 [env [:backquote r]])\n           rs]\n          :else\n          [(conj es\n                 [env [:eval-bq-rest-1 h]]\n                 [env [:backquote r]])\n           rs])))))\n\n;; --------\n;; eval\n\n(defn literal? [form]\n  (or (#{'clj-err 'char 'number} (m/type-nilable form))\n      (#{m/bel-nil m/bel-t m/bel-o m/bel-apply} form)\n      (and (m/pair? form) (#{m/bel-lit} (m/car form)))\n      (m/string? form)))\n\n(def step->fn\n  {:set-2 eval-set-2\n   :if-2 eval-if-2\n   :application-2 eval-application-2\n   :eval-many-1 eval-many-1\n   :eval-many-2 eval-many-2\n   :eval-lit-1 eval-lit-1\n   :eval-prim-simple eval-prim-simple\n   :eval-mac-2 eval-mac-2\n   :assign-vars-1 assign-vars-1\n   :assign-vars-optional-arg assign-vars-optional-arg\n   :assign-vars-typecheck-1 assign-vars-typecheck-1\n   :assign-vars-typecheck-2 assign-vars-typecheck-2\n   :assign-vars-rest assign-vars-rest\n   :eval-clo-2 eval-clo-2\n   :dyn-2 eval-dyn-2\n   :ccc-2 eval-ccc-2\n   :backquote eval-backquote\n   :eval-bq-comma-1 eval-bq-comma-1\n   :eval-bq-splice-1 eval-bq-splice-1\n   :eval-bq-pair-1 eval-bq-pair-1\n   :eval-bq-rest-1 eval-bq-rest-1\n   :eval-apply-2 eval-apply-2})\n\n(defn eval-step [es rs]\n  (let [[top rest-es] (stack-pop es)\n        [env form] top]\n    (cond\n      (literal? form)\n      [rest-es (conj rs form)]\n\n      (m/bel-variable? form)\n      (eval-variable rest-es rs env form)\n\n      (m/pair? form)\n      (eval-pair rest-es rs env form)\n\n      :else\n      (let [f (step->fn (first form))]\n        (f rest-es rs env form)))))\n\n(defn debug-loop [tid es rs]\n  (println \"---start--\")\n  (println \"tid:\" tid)\n  (println \"in:\")\n  (doall (map (comp println r/bel->pretty second) es))\n  (println \"out:\")\n  (doall (map println rs))\n  (println \"---end---\"))\n\n(defn start-thread-command? [form]\n  (and (seqable? form) (= :start-thread (first form))))\n\n(defn start-thread-command->thread [[_ env form]]\n  [(gensym) (list [env form]) ()])\n\n(defn locking? [es]\n  (let [lock (some-> es peek first :dyn (get 'lock))]\n    (and lock (not= lock m/bel-nil))))\n\n(defn eval [threads]\n  (loop [threads threads]\n    (let [[top-thread & rest-threads] threads\n          [tid es rs] top-thread\n          [_ top-form] (peek es)]\n      (cond\n        (empty? es)\n        (if (empty? rest-threads)\n          (or (peek rs) m/bel-nil)\n          (recur rest-threads))\n\n        (start-thread-command? top-form)\n        (recur\n         (into [(start-thread-command->thread top-form)\n                [tid (pop es) rs]]\n               rest-threads))\n        :else\n        (let [[es' rs'] (eval-step es rs)\n              thread' [tid es' rs']]\n          (recur\n           (if (locking? es')\n             (into [thread'] rest-threads)\n             (into (vec rest-threads) [thread']))))))))\n\n(defn eval-single [env form]\n  (eval [[(gensym) (list [env form]) ()]]))\n\n(defn eval-all\n  [env strs]\n  (mapv (fn [s]\n          (eval-single env (r/parse s))) strs))\n"]}