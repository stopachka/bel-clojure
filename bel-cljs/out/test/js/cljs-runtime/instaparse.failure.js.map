{"version":3,"sources":["instaparse/failure.cljc"],"mappings":"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","names":["instaparse.failure/index->line-column","index","text","line","col","counter","cljs.core._EQ_","cljs.core.get","instaparse.failure/get-line","n","chars","cljs.core/seq","clojure.string/replace","cljs.core/empty?","cljs.core.apply","cljs.core/str","cljs.core.take_while","cljs.core/complement","cljs.core/first","cljs.core/next","instaparse.failure/marker","and__5043__auto__","cljs.core/integer?","marker-text","cljs.core.subs","instaparse.failure/augment-failure","failure","lc","cljs.core.merge","instaparse.failure/print-reason","r","cljs.core.print","instaparse.print/char-range->str","js/RegExp","instaparse.print/regexp->str","cljs.core.pr","p__23174","map__23175","cljs.core/--destructure-map","instaparse.failure/pprint-failure","column","reason","cljs.core.println","full-reasons","cljs.core.distinct","cljs.core.map","cljs.core.filter","partial-reasons","total","cljs.core/count","seq__23177","chunk__23178","count__23179","i__23180","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","seq__23182","chunk__23183","count__23184","i__23185","cljs.core/println"],"sourcesContent":["(ns instaparse.failure\r\n  \"Facilities for printing and manipulating error messages.\"\r\n  #?(:clj (:import java.io.BufferedReader java.io.StringReader))\r\n  (:require [instaparse.print :as print]))\r\n\r\n(defn index->line-column\r\n  \"Takes an index into text, and determines the line and column info\"\r\n  [index text]\r\n  (loop [line 1, col 1, counter 0]\r\n    (cond\r\n      (= index counter) {:line line :column col}\r\n      (= \\newline (get text counter)) (recur (inc line) 1 (inc counter))\r\n      :else (recur line (inc col) (inc counter)))))\r\n\r\n#?(:clj\r\n   (defn get-line\r\n     \"Returns nth line of text, 1-based\"\r\n     [n text]\r\n     (try (nth (line-seq (BufferedReader. (StringReader. (str text)))) (dec n))\r\n          (catch Exception e \"\")))\r\n   :cljs\r\n   (defn get-line\r\n     [n text]\r\n     (loop [chars (seq (clojure.string/replace text \"\\r\\n\" \"\\n\"))\r\n            n n]\r\n       (cond\r\n         (empty? chars) \"\"\r\n         (= n 1) (apply str (take-while (complement #{\\newline}) chars))\r\n         (= \\newline (first chars)) (recur (next chars) (dec n))\r\n         :else (recur (next chars) n)))))\r\n\r\n(defn marker\r\n  \"Creates string with caret at nth position, 1-based\r\n   and accounts for horizontal tabs which might change\r\n   the alignment of the '^' to the error location.\"\r\n  [text n]\r\n  (when (and text (integer? n))\r\n    (let [marker-text (clojure.string/replace text #\"[^\\s]\" \" \")]\r\n      (if (<= n 1)\r\n          \"^\"\r\n          (str (subs marker-text 0 (dec n)) \\^)))))\r\n      \r\n(defn augment-failure\r\n  \"Adds text, line, and column info to failure object.\"\r\n  [failure text]  \r\n  (let [lc (index->line-column (:index failure) text)]\r\n    (merge failure \r\n           lc\r\n           {:text (get-line (:line lc) text)})))\r\n\r\n(defn print-reason\r\n  \"Provides special case for printing negative lookahead reasons\"\r\n  [r]\r\n  (cond\r\n    (:NOT r)\r\n    (do (print \"NOT \")\r\n        (print (:NOT r))),\r\n    (:char-range r)\r\n    (print (print/char-range->str r))\r\n    (instance? #?(:clj java.util.regex.Pattern\r\n                  :cljs js/RegExp)\r\n               r)\r\n    (print (print/regexp->str r))\r\n    :else\r\n    (pr r)))\r\n\r\n(defn pprint-failure\r\n  \"Takes an augmented failure object and prints the error message\"\r\n  [{:keys [line column text reason]}]\r\n  (println (str \"Parse error at line \" line \", column \" column \":\"))\r\n  (println text)\r\n  (println (marker text column))\r\n  (let [full-reasons (distinct (map :expecting\r\n                                    (filter :full reason)))\r\n        partial-reasons (distinct (map :expecting\r\n                                       (filter (complement :full) reason)))\r\n        total (+ (count full-reasons) (count partial-reasons))]        \r\n    (cond (zero? total) nil\r\n          (= 1 total) (println \"Expected:\")\r\n          :else (println \"Expected one of:\"))\r\n    (doseq [r full-reasons]\r\n      (print-reason r)\r\n      (println \" (followed by end-of-string)\"))\r\n    (doseq [r partial-reasons]\r\n      (print-reason r)\r\n      (println))))\r\n"]}