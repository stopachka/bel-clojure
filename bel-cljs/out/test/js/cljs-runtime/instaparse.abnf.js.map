{"version":3,"sources":["instaparse/abnf.cljc"],"mappings":"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","names":["instaparse.abnf/*case-insensitive*","instaparse.abnf/abnf-core","instaparse.combinators-source/regexp","instaparse.combinators-source/string","instaparse.combinators_source.alt","instaparse.combinators-source/star","instaparse.combinators_source.cat","instaparse.abnf/abnf-grammar-common","instaparse.abnf/abnf-grammar-clj-only","instaparse.abnf/abnf-grammar-cljs-only","instaparse.abnf/abnf-parser","cljs.core/List","cljs.core.merge","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","instaparse.abnf/get-char-combinator","seq24984","self__5755__auto__","cljs.core/seq","nums","cljs.core._EQ_","cljs.core/second","vec__24985","cljs.core.nth","lo","_","hi","instaparse.combinators_source.unicode_char","cljs.core.apply","instaparse.combinators-source/cat","iter__5523__auto__","s__24989","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__24991","cljs.core/chunk-buffer","i__24990","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__24988","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","n","instaparse.abnf/project","m","ks","cljs.core.into","s__24993","b__24995","i__24994","iter__24992","k","cljs.core/contains?","instaparse.abnf/merge-core","grammar-map","cljs.core.distinct","cljs.core.mapcat","instaparse.cfg/seq-nt","cljs.core/vals","instaparse.abnf/hide-tag?","p","instaparse.reduction/raw-non-terminal-reduction","instaparse.abnf/alt-preserving-hide-tag","p1","p2","hide-tag-p1?","hide-tag-p2?","instaparse.combinators-source/hide-tag","cljs.core.dissoc","instaparse.abnf/parse-int","js/parseInt","rest__24997#","rest__24998#","rest__24996#","instaparse.abnf/abnf-transformer","cljs.core/hash-map","tag","rule","cljs.core.keyword","clojure.string/upper-case","cljs.core/str","instaparse.combinators-source/nt","instaparse.combinators-source/alt","items","G__25004","js/Error","repeat","element","cljs.core/empty?","instaparse.combinators-source/rep","instaparse.combinators-source/plus","instaparse.combinators-source/opt","or__5045__auto__","js/Infinity","instaparse.combinators-source/hide","instaparse.combinators-source/look","instaparse.combinators-source/neg","cljs.core.comp","instaparse.cfg/process-regexp","cs","instaparse.cfg/string+","G__24999","G__25000","G__25005","G__25002","G__25003","G__25001","instaparse.abnf/rules->grammar-map","rules","cljs.core/merge-with","instaparse.abnf/abnf","p__25008","map__25009","cljs.core/--destructure-map","seq25006","G__25007","cljs.core/next","self__5754__auto__","spec","opts","*case-insensitive-literals*-orig-val__25010","*case-insensitive-literals*-temp-val__25011","instaparse.cfg/*case-insensitive-literals*","tree","instaparse.gll/parse","instaparse.gll/Failure","instaparse.util.throw_runtime_exception","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__25012","cljs.core/*print-newline*","*print-fn*-orig-val__25013","cljs.core/*print-fn*","*print-newline*-temp-val__25014","*print-fn*-temp-val__25015","x__5691__auto__","cljs.core.println","cljs.core/ffirst","instaparse.transform/transform","instaparse.abnf/build-parser","output-format","rule-tree","*print-newline*-orig-val__25016","*print-fn*-orig-val__25017","*print-newline*-temp-val__25018","*print-fn*-temp-val__25019","start-production","instaparse.cfg/check-grammar","instaparse.reduction.apply_standard_reductions","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.abnf\r\n  \"This is the context free grammar that recognizes ABNF notation.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.transform :as t]\r\n            [instaparse.cfg :as cfg]\r\n            [instaparse.gll :as gll]\r\n            [instaparse.reduction :as red]\r\n            [instaparse.util :refer [throw-runtime-exception]]\r\n            [instaparse.combinators-source :refer\r\n             [Epsilon opt plus star rep alt ord cat string-ci string\r\n              string-ci regexp nt look neg hide hide-tag unicode-char]]\r\n            #?(:cljs [goog.string.format])\r\n            [clojure.walk :as walk])\r\n  #?(:cljs (:require-macros [instaparse.abnf :refer [precompile-cljs-grammar]])))\r\n\r\n(def ^:dynamic *case-insensitive*\r\n  \"This is normally set to false, in which case the non-terminals\r\nare treated as case-sensitive, which is NOT the norm\r\nfor ABNF grammars. If you really want case-insensitivity,\r\nbind this to true, in which case all non-terminals\r\nwill be converted to upper-case internally (which\r\nyou'll have to keep in mind when transforming).\"\r\n  false)\r\n\r\n(def abnf-core\r\n  {:ALPHA (regexp \"[a-zA-Z]\")\r\n   :BIT (regexp \"[01]\")\r\n   :CHAR (regexp \"[\\\\u0001-\\\\u007F]\")\r\n   :CR (string \"\\u000D\")\r\n   :CRLF (string \"\\u000D\\u000A\")\r\n   :CTL (regexp \"[\\\\u0000-\\\\u001F|\\\\u007F]\")\r\n   :DIGIT (regexp \"[0-9]\")\r\n   :DQUOTE (string \"\\u0022\")\r\n   :HEXDIG (regexp \"[0-9a-fA-F]\")\r\n   :HTAB (string \"\\u0009\")\r\n   :LF (string \"\\u000A\")\r\n   :LWSP (alt (alt (string \"\\u0020\") (string \"\\u0009\")) ;WSP\r\n              (star\r\n                (cat (string \"\\u000D\\u000A\") ;CRLF\r\n                     (alt (string \"\\u0020\") (string \"\\u0009\"))))) ;WSP\r\n   :OCTET (regexp \"[\\\\u0000-\\\\u00FF]\")\r\n   :SP (string \"\\u0020\")\r\n   :VCHAR (regexp \"[\\\\u0021-\\\\u007E]\")\r\n   :WSP (alt (string \"\\u0020\")     ;SP\r\n             (string \"\\u0009\"))})  ;HTAB\r\n\r\n(def abnf-grammar-common\r\n  \"\r\n<rulelist> = <opt-whitespace> (rule | hide-tag-rule)+;\r\nrule = rulename-left <defined-as> alternation <opt-whitespace>;\r\nhide-tag-rule = hide-tag <defined-as> alternation <opt-whitespace>;\r\nrulename-left = rulename;\r\nrulename-right = rulename;\r\n<hide-tag> = <'<' opt-whitespace> rulename-left <opt-whitespace '>'>;\r\ndefined-as = <opt-whitespace> ('=' | '=/') <opt-whitespace>;\r\nalternation = concatenation (<opt-whitespace '/' opt-whitespace> concatenation)*;\r\nconcatenation = repetition (<whitespace> repetition)*;\r\nrepetition = [repeat] <opt-whitespace> element;\r\nrepeat = NUM | (NUM? '*' NUM?);\r\n<element> = rulename-right | group | hide | option | char-val | num-val\r\n          | look | neg | regexp;\r\nlook = <'&' opt-whitespace> element;\r\nneg = <'!' opt-whitespace> element;\r\n<group> = <'(' opt-whitespace> alternation <opt-whitespace ')'>;\r\noption = <'[' opt-whitespace> alternation <opt-whitespace ']'>;\r\nhide = <'<' opt-whitespace> alternation <opt-whitespace '>'>;\r\nchar-val = <'\\\\u0022'> #'[\\\\u0020-\\\\u0021\\\\u0023-\\\\u007E]'* <'\\\\u0022'> (* double-quoted strings *)\r\n         | <'\\\\u0027'> #'[\\\\u0020-\\\\u0026\\u0028-\\u007E]'* <'\\\\u0027'>;  (* single-quoted strings *)\r\n<num-val> = <'%'> (bin-val | dec-val | hex-val);\r\nbin-val = <'b'> bin-char\r\n          [ (<'.'> bin-char)+ | ('-' bin-char) ];\r\nbin-char = ('0' | '1')+;\r\ndec-val = <'d'> dec-char\r\n          [ (<'.'> dec-char)+ | ('-' dec-char) ];\r\ndec-char = DIGIT+;\r\nhex-val = <'x'> hex-char\r\n          [ (<'.'> hex-char)+ | ('-' hex-char) ];\r\nhex-char = HEXDIG+;\r\nNUM = DIGIT+;\r\n<DIGIT> = #'[0-9]';\r\n<HEXDIG> = #'[0-9a-fA-F]';\r\n\r\n\r\n(* extra entrypoint to be used by the abnf combinator *)\r\n<rules-or-parser> = rulelist | alternation;\r\n  \")\r\n\r\n(def abnf-grammar-clj-only\r\n  \"\r\n<rulename> = #'[a-zA-Z][-a-zA-Z0-9]*(?x) #identifier';\r\nopt-whitespace = #'\\\\s*(?:;.*?(?:\\\\u000D?\\\\u000A\\\\s*|$))*(?x) # optional whitespace or comments';\r\nwhitespace = #'\\\\s+(?:;.*?\\\\u000D?\\\\u000A\\\\s*)*(?x) # whitespace or comments';\r\nregexp = #\\\"#'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'(?x) #Single-quoted regexp\\\"\r\n       | #\\\"#\\\\\\\"[^\\\\\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\\\\"\\\\\\\\]*)*\\\\\\\"(?x) #Double-quoted regexp\\\"\r\n\")\r\n\r\n(def abnf-grammar-cljs-only\r\n  \"\r\n<rulename> = #'[a-zA-Z][-a-zA-Z0-9]*';\r\nopt-whitespace = #'\\\\s*(?:;.*?(?:\\\\u000D?\\\\u000A\\\\s*|$))*';\r\nwhitespace = #'\\\\s+(?:;.*?\\\\u000D?\\\\u000A\\\\s*)*';\r\nregexp = #\\\"#'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'\\\"\r\n       | #\\\"#\\\\\\\"[^\\\\\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\\\\"\\\\\\\\]*)*\\\\\\\"\\\"\r\n\")\r\n\r\n#?(:clj\r\n   (defmacro precompile-cljs-grammar\r\n     []\r\n     (let [combinators (red/apply-standard-reductions\r\n                         :hiccup (cfg/ebnf (str abnf-grammar-common\r\n                                                abnf-grammar-cljs-only)))]\r\n       (walk/postwalk\r\n         (fn [form]\r\n           (cond\r\n             ;; Lists cannot be evaluated verbatim\r\n             (seq? form)\r\n             (list* 'list form)\r\n\r\n             ;; Regexp terminals are handled differently in cljs\r\n             (= :regexp (:tag form))\r\n             `(merge (regexp ~(str (:regexp form)))\r\n                     ~(dissoc form :tag :regexp))\r\n\r\n             :else form))\r\n         combinators))))\r\n\r\n#?(:clj\r\n   (def abnf-parser (red/apply-standard-reductions\r\n                      :hiccup (cfg/ebnf (str abnf-grammar-common\r\n                                             abnf-grammar-clj-only))))\r\n   :cljs\r\n   (def abnf-parser (precompile-cljs-grammar)))\r\n\r\n(defn get-char-combinator\r\n  [& nums]\r\n  (cond\r\n    (= \"-\" (second nums)) (let [[lo _ hi] nums]\r\n                            (unicode-char lo hi))\r\n    :else (apply cat (for [n nums]\r\n                       (unicode-char n)))))\r\n\r\n(defn project\r\n  \"Restricts map to certain keys\"\r\n  [m ks]\r\n  (into {}\r\n        (for [k ks\r\n              :when (contains? m k)]\r\n          [k (m k)])))\r\n\r\n(defn merge-core\r\n  \"Merges abnf-core map in with parsed grammar map\"\r\n  [grammar-map]\r\n  (merge\r\n    (project abnf-core (distinct (mapcat cfg/seq-nt (vals grammar-map))))\r\n    grammar-map))\r\n\r\n(defn hide-tag?\r\n  \"Tests whether parser was constructed with hide-tag\"\r\n  [p]\r\n  (= (:red p) red/raw-non-terminal-reduction))\r\n\r\n(defn alt-preserving-hide-tag [p1 p2]\r\n  (let [hide-tag-p1? (hide-tag? p1)\r\n        hide-tag-p2? (hide-tag? p2)]\r\n    (cond\r\n      (and hide-tag-p1? hide-tag-p2?)\r\n      (hide-tag (alt (dissoc p1 :red) (dissoc p2 :red)))\r\n      hide-tag-p1?\r\n      (hide-tag (alt (dissoc p1 :red) p2))\r\n      hide-tag-p2?\r\n      (hide-tag (alt p1 (dissoc p2 :red)))\r\n      :else\r\n      (alt p1 p2))))\r\n\r\n#?(:clj\r\n   (defn parse-int\r\n     ([string] (Integer/parseInt string))\r\n     ([string radix] (Integer/parseInt string radix)))\r\n   :cljs\r\n   (def parse-int js/parseInt))\r\n\r\n(def abnf-transformer\r\n  {\r\n   :rule hash-map\r\n   :hide-tag-rule (fn [tag rule] {tag (hide-tag rule)})\r\n   :rulename-left #(if *case-insensitive*\r\n                     (keyword (clojure.string/upper-case (apply str %&)))\r\n                     (keyword (apply str %&)))\r\n   :rulename-right #(if *case-insensitive*\r\n                      (nt (keyword (clojure.string/upper-case (apply str %&))))\r\n                      (nt (keyword (apply str %&))))\r\n   ; since rulenames are case insensitive, convert it to upper case internally to be consistent\r\n   :alternation alt\r\n   :concatenation cat\r\n   :repeat (fn [& items]\r\n             (case (count items)\r\n               1 (cond\r\n                   (= (first items) \"*\") {}                         ; *\r\n                   :else {:low (first items), :high (first items)}) ; x\r\n               2 (cond\r\n                   (= (first items) \"*\") {:high (second items)}     ; *x\r\n                   :else {:low (first items)})                      ; x*\r\n               3 {:low (first items), :high (nth items 2)}))        ; x*y\r\n\r\n   :repetition (fn\r\n                 ([repeat element]\r\n                   (cond\r\n                     (empty? repeat) (star element)\r\n                     (= (count repeat) 2) (rep (:low repeat) (:high repeat) element)\r\n                     (= (:low repeat) 1) (plus element)\r\n                     (= (:high repeat) 1) (opt element)\r\n                     :else (rep (or (:low repeat) 0)\r\n                                (or (:high repeat) #?(:clj Double/POSITIVE_INFINITY\r\n                                                      :cljs js/Infinity))\r\n                                element)))\r\n                 ([element]\r\n                   element))\r\n   :option opt\r\n   :hide hide\r\n   :look look\r\n   :neg neg\r\n   :regexp (comp regexp cfg/process-regexp)\r\n   :char-val (fn [& cs]\r\n               (cfg/string+ (apply str cs) true))\r\n   :bin-char (fn [& cs]\r\n               (parse-int (apply str cs) 2))\r\n   :dec-char (fn [& cs]\r\n               (parse-int (apply str cs)))\r\n   :hex-char (fn [& cs]\r\n               (parse-int (apply str cs) 16))\r\n   :bin-val get-char-combinator\r\n   :dec-val get-char-combinator\r\n   :hex-val get-char-combinator\r\n   :NUM #(parse-int (apply str %&))})\r\n\r\n(defn rules->grammar-map\r\n  [rules]\r\n  (merge-core (apply merge-with alt-preserving-hide-tag rules)))\r\n\r\n(defn abnf\r\n  \"Takes an ABNF grammar specification string and returns the combinator version.\r\nIf you give it the right-hand side of a rule, it will return the combinator equivalent.\r\nIf you give it a series of rules, it will give you back a grammar map.\r\nUseful for combining with other combinators.\"\r\n  [spec & {:as opts}]\r\n  (binding [cfg/*case-insensitive-literals* (:string-ci opts :default)]\r\n    (let [tree (gll/parse abnf-parser :rules-or-parser spec false)]\r\n      (cond\r\n        (instance? instaparse.gll.Failure tree)\r\n        (throw-runtime-exception\r\n          \"Error parsing grammar specification:\\n\"\r\n          (with-out-str (println tree)))\r\n        (= :alternation (ffirst tree))\r\n        (t/transform abnf-transformer (first tree))\r\n\r\n        :else (rules->grammar-map (t/transform abnf-transformer tree))))))\r\n\r\n(defn build-parser [spec output-format]\r\n  (let [rule-tree (gll/parse abnf-parser :rulelist spec false)]\r\n    (if (instance? instaparse.gll.Failure rule-tree)\r\n      (throw-runtime-exception\r\n        \"Error parsing grammar specification:\\n\"\r\n        (with-out-str (println rule-tree)))\r\n      (let [rules (t/transform abnf-transformer rule-tree)\r\n            grammar-map (rules->grammar-map rules)\r\n            start-production (first (first (first rules)))]\r\n        {:grammar (cfg/check-grammar (red/apply-standard-reductions output-format grammar-map))\r\n         :start-production start-production\r\n         :output-format output-format}))))\r\n\r\n"]}