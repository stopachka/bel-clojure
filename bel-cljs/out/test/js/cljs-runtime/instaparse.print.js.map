{"version":3,"sources":["instaparse/print.cljc"],"mappings":"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","names":["instaparse.print/paren-for-tags","tag-set","hidden?","parser","and__5043__auto__","cljs.core/not","G__23120","instaparse.print/combinators->str","instaparse.print/paren-for-compound","cljs.core.partial","instaparse.print/regexp-replace","s","G__23121","instaparse.print/regexp->str","r","clojure.string/replace","cljs.core.subs","instaparse.print/number->hex-padded","n","p__23123","map__23124","cljs.core/--destructure-map","cljs.core.get","instaparse.print/char-range->str","lo","hi","cljs.core._EQ_","var_args","G__23127","js/Error","p__23131","map__23132","p","instaparse.print.combinators__GT_str","parser1","parser2","parsers","tag","G__23136","cljs.core/Keyword","cljs.core.not_EQ_","clojure.string.join","cljs.core.map","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__23137","cljs.core/*print-newline*","*print-fn*-orig-val__23138","cljs.core/*print-fn*","*print-newline*-temp-val__23139","*print-fn*-temp-val__23140","x__5691__auto__","cljs.core.pr","*print-newline*-orig-val__23141","*print-fn*-orig-val__23142","*print-newline*-temp-val__23143","*print-fn*-temp-val__23144","instaparse.print/rule->str","non-terminal","cljs.core/name","p__23148","map__23149","instaparse.print/Parser->str","grammar","start","cljs.core/cons","iter__5523__auto__","s__23151","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__23153","cljs.core/chunk-buffer","i__23152","vec__23154","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23150","cljs.core/chunk-rest","vec__23157","cljs.core/first","cljs.core/rest","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.print\r\n  \"Facilities for taking parsers and grammars, and converting them to strings.\r\n   Used for pretty-printing.\"\r\n  (:require [clojure.string :as str]))\r\n\r\n(declare combinators->str) ; mutual recursion\r\n\r\n(defn paren-for-tags [tag-set hidden? parser]\r\n  (if (and (not hidden?) (tag-set (parser :tag)))\r\n    (str \"(\" (combinators->str parser false) \")\")\r\n    (combinators->str parser false)))\r\n\r\n(def paren-for-compound \r\n  (partial paren-for-tags #{:alt :ord :cat}))\r\n\r\n(defn regexp-replace\r\n  \"Replaces whitespace characters with escape sequences for better printing\" \r\n  [s]\r\n  (case s\r\n    \"\\n\" \"\\\\n\"\r\n    \"\\b\" \"\\\\b\"\r\n    \"\\f\" \"\\\\f\"\r\n    \"\\r\" \"\\\\r\"\r\n    \"\\t\" \"\\\\t\"\r\n    s)) \r\n\r\n(defn regexp->str [r]\r\n  (str/replace \r\n    (str \"#\\\"\"\r\n         #?(:clj (str r)\r\n            :cljs (subs (.-source r) 1))\r\n         \"\\\"\")\r\n    #\"[\\s]\" regexp-replace))\r\n\r\n#?(:clj\r\n   (defn char-range->str [{:keys [lo hi]}]\r\n     (if (= lo hi)\r\n       (format \"%%x%04x\" lo)\r\n       (format \"%%x%04x-%04x\" lo hi)))\r\n\r\n   :cljs\r\n   (do\r\n     (defn number->hex-padded [n]\r\n       (if (<= n 0xFFF)\r\n         (.substr (str \"0000\" (.toString n 16)) -4)\r\n         (.toString n 16)))\r\n\r\n     (defn char-range->str [{:keys [lo hi]}]\r\n       (if (= lo hi)\r\n         (str \"%x\" (number->hex-padded lo))\r\n         (str \"%x\" (number->hex-padded lo) \"-\" (number->hex-padded hi))))))\r\n\r\n(defn combinators->str\r\n  \"Stringifies a parser built from combinators\"\r\n  ([p] (combinators->str p false))\r\n  ([{:keys [parser parser1 parser2 parsers tag] :as p} hidden?]\r\n    (if (and (not hidden?) (:hide p))\r\n      (str \\< (combinators->str p true) \\>)\r\n      (case tag\r\n        :epsilon \"\\u03b5\"\r\n        :opt (str (paren-for-compound hidden? parser) \"?\")\r\n        :plus (str (paren-for-compound hidden? parser) \"+\")\r\n        :star (str (paren-for-compound hidden? parser) \"*\")\r\n        :rep (if (not= (:min p) (:max p))\r\n               (str (paren-for-compound hidden? parser) \\{ \r\n                    (:min p) \\, (:max p) \\})\r\n               (str (paren-for-compound hidden? parser) \\{ \r\n                    (:min p)\\}))\r\n        :alt (str/join \" | \" (map (partial paren-for-tags #{:ord} hidden?) parsers))\r\n        :ord (str (paren-for-tags #{:alt} hidden? parser1)\r\n                  \" / \"\r\n                  (paren-for-tags #{:alt} hidden? parser2))\r\n        :cat (str/join \" \" (map (partial paren-for-tags #{:alt :ord} hidden?) parsers))\r\n        :string (with-out-str (pr (:string p)))\r\n        :string-ci (with-out-str (pr (:string p)))\r\n        :char (char-range->str p)\r\n        :regexp (regexp->str (:regexp p))\r\n        :nt (subs (str (:keyword p)) 1)\r\n        :look (str \"&\" (paren-for-compound hidden? parser))\r\n        :neg (str \"!\" (paren-for-compound hidden? parser))))))\r\n  \r\n(defn rule->str\r\n  \"Takes a non-terminal symbol and a parser built from combinators,\r\n   and returns a string for the rule.\"\r\n  [non-terminal parser]\r\n  (if (= (-> parser :red :reduction-type) :raw)\r\n    (str \\< (name non-terminal) \\> \r\n         \" = \" \r\n         (combinators->str parser))\r\n    (str (name non-terminal)\r\n         \" = \" \r\n         (combinators->str parser))))\r\n\r\n(defn Parser->str\r\n  \"Takes a Parser object, i.e., something with a grammar map and a start \r\n   production keyword, and stringifies it.\" \r\n  [{grammar :grammar start :start-production}]\r\n  (str/join \\newline\r\n            (cons\r\n              ; Put starting production first\r\n              (rule->str start (grammar start))\r\n              ; Then the others\r\n              (for [[non-terminal parser] grammar\r\n                    :when (not= non-terminal start)]\r\n                (rule->str non-terminal parser)))))\r\n"]}