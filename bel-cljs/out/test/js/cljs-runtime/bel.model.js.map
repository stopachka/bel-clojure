{"version":3,"sources":["bel/model.cljs"],"mappings":"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","names":["bel.model/first-and-only","xs","msg","js/Error","cljs.core._EQ_","cljs.core/count","cljs.core/first","bel.model/string?","cljs.core/string?","bel.model/char?","cljs.core/char?","bel.model/symbol?","cljs.core/symbol?","bel.model/number?","cljs.core/number?","bel.model/pair?","cljs.core/array?","bel.model/mut-map?","cljs.core/object?","bel.model/imm-map?","cljs.core.comp","cljs.core.partial","cljs.core/=","cljs.core/PersistentArrayMap","cljs.core/type","bel.model/clj-err?","cljs.core/instance?","bel.model/type-nilable","x","v","and__5043__auto__","cljs.core/seqable?","fexpr__12647","cljs.core.symbol","cljs.core/name","bel.model/type","bel.model/p","cljs.core/array","bel.model/bel-quote","bel.model/bel-nil","bel.model/bel-t","bel.model/bel-err-sym","bel.model/bel-dot","bel.model/bel-lit","bel.model/bel-prim","bel.model/bel-o","bel.model/bel-a","bel.model/bel-d","bel.model/bel-apply","bel.model/bel-set","bel.model/bel-clo","bel.model/bel-mac","bel.model/bel-globe","bel.model/bel-scope","bel.model/bel-if","bel.model/bel-cont","bel.model/quoted-p","a","G__12662","G__12663","bel.model/seq->p","vec__12669","seq__12670","cljs.core/seq","first__12671","cljs.core/next","n","after-n","after-x","cljs.core/rest","cljs.core/empty?","G__12676","G__12677","bel.model/id","b","id-f","cljs.core/identical?","bel.model/join","G__12685","G__12686","bel.model/car","form","cljs.core/not","bel.model/cdr","cljs.core/last","bel.model/p->seq","cljs.core/cons","r","bel.model/xar","y","bel.model/xdr","bel.model/sym","cljs.core/symbol","bel.model/nom","bel.model/coin","cljs.core/rand-nth","bel.model/p-append","G__12712","G__12713","G__12714","G__12715","G__12716","G__12717","bel.model/bel-variable?","p__12718","vec__12719","cljs.core.nth","bel.model/bel-optional?","h","p__12722","vec__12723","vec__12726","bel.model/bel-optional-var","_h","variable","p__12729","vec__12730","vec__12733","bel.model/bel-optional-arg","_variable","p__12736","vec__12737","bel.model/bel-typecheck?","p__12740","vec__12741","vec__12744","bel.model/bel-typecheck-var","p__12747","vec__12748","vec__12751","bel.model/bel-typecheck-f","bel.model/clj-bool->bel","bel.model/map-get","m","k","or__5045__auto__","cljs.core.get","bel.model.goog$module$goog$object.get","bel.model/map-assoc","m'","cljs.core.assoc","bel.model/map-dissoc","cljs.core.dissoc","bel.model/mut-map","bel.model/map-put","bel.model.goog$module$goog$object.set","bel.model/map-delete"],"sourcesContent":["(ns bel.model\n  (:require [goog.object :as gobj])\n  (:refer-clojure :rename {type clj-type\n                           symbol? clj-symbol?\n                           string? clj-string?\n                           char? clj-char?\n                           number? clj-number?}))\n\n;; ----\n;; Misc\n\n(defn first-and-only [xs msg]\n  (assert (= (count xs) 1) msg)\n  (first xs))\n\n;; -------------\n;; primitive types\n\n(def string? clj-string?)\n(def char? clj-char?)\n(def symbol? clj-symbol?)\n(def number? clj-number?)\n\n(def pair? array?)\n(def mut-map? object?)\n(def imm-map? (comp (partial = PersistentArrayMap) clj-type))\n(def clj-err? (partial instance? js/Error))\n\n(defn type-nilable [x]\n  (cond\n    (symbol? x) 'symbol\n    (string? x) 'string\n    (char? x) 'char\n    (number? x) 'number\n    (pair? x) 'pair\n    (mut-map? x) 'mut-map\n    (imm-map? x) 'imm-map\n    (clj-err? x) 'clj-err\n    :else\n    (let [v (and (seqable? x) (first x))]\n      (when (#{:splice :comma :backquote} v)\n        (symbol (name v))))))\n\n(defn type [x]\n  (let [v (type-nilable x)]\n    (assert v (str \"unsupported type for form = \" x))\n    v))\n\n;; ---------\n;; Pair Cons\n\n(def p array)\n\n;; ---------\n;; Constants\n\n(def bel-quote 'quote)\n(def bel-nil (symbol \"nil\"))\n(def bel-t 't)\n(def bel-err-sym 'err)\n(def bel-dot [:dot \".\"])\n(def bel-lit 'lit)\n(def bel-prim 'prim)\n(def bel-o 'o)\n(def bel-a 'a)\n(def bel-d 'd)\n(def bel-apply 'apply)\n(def bel-set 'set)\n(def bel-clo 'clo)\n(def bel-mac 'mac)\n(def bel-globe 'globe)\n(def bel-scope 'scope)\n(def bel-if 'if)\n(def bel-cont 'cont)\n\n;; -------------\n;; Pair Helpers\n\n(defn quoted-p [a]\n  (p bel-quote (p a bel-nil)))\n\n(defn seq->p\n  [xs]\n  (let [[x n & after-n] xs\n        after-x (rest xs)]\n    (if (empty? xs)\n      bel-nil\n      (p\n       x\n       (if (= bel-dot n)\n         (first-and-only after-n \"dotted list _must_ have 1 exp after the dot\")\n         (seq->p after-x))))))\n\n(defn id [a b]\n  (let [id-f (if (pair? a) identical? =)]\n    (if (id-f a b) bel-t bel-nil)))\n\n(defn join [a b]\n  (p a\n     (if (string? b) (seq->p b) b)))\n\n(defn car [form]\n  (cond\n    (= bel-nil form) form\n\n    (string? form) (first form)\n\n    (not (pair? form))\n    (throw (js/Error.  (str \"expected pair, got = \" form)))\n\n    :else\n    (first form)))\n\n(defn cdr [form]\n  (cond\n    (= bel-nil form) form\n\n    (string? form) (seq->p (rest form))\n\n    (not (pair? form))\n    (throw (js/Error. (str \"expected pair, got = \" form)))\n\n    :else\n    (last form)))\n\n(defn p->seq [form]\n  (if (= bel-nil form)\n    ()\n    (cons\n     (car form)\n     (let [r (cdr form)]\n       (cond\n         (pair? r) (p->seq r)\n         (= bel-nil r) []\n         :else [r])))))\n\n(defn xar [form y]\n  (aset form 0 y)\n  form)\n\n(defn xdr [form y]\n  (aset form 1 y)\n  form)\n\n(def sym symbol)\n\n(def nom name)\n\n(defn coin [] (rand-nth [bel-t bel-nil]))\n\n(defn p-append [a b]\n  (cond\n    (= bel-nil a) b\n    (= bel-nil (cdr a)) (p (car a) b)\n    :else\n    (p\n     (car a)\n     (p-append (cdr a) b))))\n\n;; ---------\n;; Variable\n\n(def bel-variable? symbol?)\n\n;; ---------\n;; Optional\n\n(defn bel-optional? [[h]]\n  (= bel-o h))\n\n(defn bel-optional-var [[_h [variable]]] variable)\n\n(defn bel-optional-arg [[_h [_variable r]]] (car r))\n\n;; ---------\n;; Typecheck\n\n(defn bel-typecheck? [[h]]\n  (= bel-t h))\n\n(defn bel-typecheck-var [[_h [variable]]] variable)\n\n(defn bel-typecheck-f [[_h [_variable r]]] (car r))\n\n;; -------\n;; Interop\n\n(defn clj-bool->bel [x] (if x bel-t bel-nil))\n\n;; ----\n;; Maps\n\n(defn map-get [m k]\n  (if (= m bel-nil)\n    bel-nil\n    (or (get m k) (gobj/get m k) bel-nil)))\n\n(defn map-assoc [m k v]\n  (let [m' (if (= bel-nil m) {} m)]\n    (assoc m' k v)))\n\n(defn map-dissoc [m k]\n  (if (= bel-nil m) bel-nil\n      (let [m' (dissoc m k)]\n        (if (empty? m') bel-nil m'))))\n\n(defn mut-map []\n  #js {})\n\n(defn map-put [m k v]\n  (gobj/set m k v)\n  m)\n\n(defn map-delete [m k]\n  (js-delete  m k))\n\n"]}