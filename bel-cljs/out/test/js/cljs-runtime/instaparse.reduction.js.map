{"version":3,"sources":["instaparse/reduction.cljc"],"mappings":"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","names":["instaparse.reduction/singleton?","s","cljs.core/seq","cljs.core/not","cljs.core/next","instaparse.reduction/red","parser","f","cljs.core.assoc","instaparse.reduction/raw-non-terminal-reduction","instaparse.reduction/HiccupNonTerminalReduction","key","instaparse.reduction/EnliveNonTerminalReduction","instaparse.reduction/reduction-types","instaparse.reduction/node-builders","tag","item","cljs.core/List","instaparse.reduction/standard-non-terminal-reduction","instaparse.reduction/apply-reduction","result","G__23244","cljs.core/Keyword","instaparse.auto-flatten-seq/EMPTY","instaparse.auto-flatten-seq/convert-afs-to-vec","instaparse.auto-flatten-seq/auto-flatten-seq","content","cljs.core/count","var_args","G__23247","instaparse.reduction/apply-standard-reductions","js/Error","grammar","instaparse.reduction.apply_standard_reductions","reduction-type","temp__5802__auto__","reduction","cljs.core.into","iter__5523__auto__","s__23253","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__23255","cljs.core/chunk-buffer","i__23254","vec__23259","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23252","cljs.core/chunk-rest","vec__23262","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","instaparse.util.throw_illegal_argument_exception","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.reduction\r\n  (:require [instaparse.auto-flatten-seq :as afs]\r\n            [instaparse.util :refer [throw-illegal-argument-exception]]))\r\n\r\n;; utilities\r\n\r\n(defn singleton? [s]\r\n  (and (seq s) (not (next s))))\r\n\r\n;; red is a reduction combinator for expert use only\r\n;; because it is used internally to control the tree tags that\r\n;; are displayed, so adding a different reduction would change\r\n;; that behavior.\r\n\r\n(defn red [parser f] (assoc parser :red f))\r\n\r\n;; Flattening and reductions\r\n\r\n(def raw-non-terminal-reduction {:reduction-type :raw})\r\n\r\n(defn HiccupNonTerminalReduction [key]\r\n  {:reduction-type :hiccup :key key})\r\n\r\n(defn EnliveNonTerminalReduction [key] \r\n  {:reduction-type :enlive, :key key})\r\n\r\n(def ^:constant reduction-types \r\n  {:hiccup HiccupNonTerminalReduction\r\n   :enlive EnliveNonTerminalReduction})\r\n                    \r\n(def ^:constant node-builders\r\n  ; A map of functions for building a node that only has one item\r\n  ; These functions are used in total-parse mode to build failure nodes\r\n  {:enlive (fn [tag item] {:tag tag :content (list item)})\r\n   :hiccup (fn [tag item] [tag item])})\r\n\r\n(def standard-non-terminal-reduction :hiccup)\r\n\r\n(defn apply-reduction [f result]\r\n  (case (:reduction-type f)\r\n    :raw (afs/conj-flat afs/EMPTY result)               \r\n    :hiccup (afs/convert-afs-to-vec (afs/conj-flat (afs/auto-flatten-seq [(:key f)]) result))\r\n    :enlive \r\n    (let [content (afs/conj-flat afs/EMPTY result)]\r\n      {:tag (:key f), :content (if (zero? (count content)) nil content)})\r\n    (f result)))\r\n    \r\n(defn apply-standard-reductions \r\n  ([grammar] (apply-standard-reductions standard-non-terminal-reduction grammar))\r\n  ([reduction-type grammar]\r\n    (if-let [reduction (reduction-types reduction-type)]\r\n      (into {} (for [[k v] grammar]\r\n                 (if (:red v) [k v]\r\n                   [k (assoc v :red (reduction k))])))\r\n      (throw-illegal-argument-exception\r\n        \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\"))))\r\n"]}