{"version":3,"sources":["bel/reader.cljs"],"mappings":"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","names":["bel.reader/form-transform","k","f","x","cljs.core/coll?","cljs.core._EQ_","cljs.core/first","bel.reader/unwrap-sexp","cljs.core/second","bel.reader/unwrap-space","bel.reader/unwrap-name","bel.reader/list->pair","p__13499","vec__13500","seq__13501","cljs.core/seq","first__13502","cljs.core/next","_t","children","bel.model/seq->p","bel.reader/transform-string","p__13503","vec__13504","seq__13505","first__13506","clojure.string.join","cljs.core.map","bel.reader/quote->pair","p__13507","vec__13508","cljs.core.nth","_","exp","bel.model/quoted-p","bel.reader/abbrev-fn->pair","p__13511","vec__13512","seq__13513","first__13514","xs","G__13515","G__13516","bel.model/p","G__13517","G__13518","G__13519","G__13520","bel.model/bel-nil","G__13521","G__13522","bel.reader/handle-bar","left-xs","right-xs","G__13523","G__13524","G__13525","G__13526","bel.reader/handle-abbrev-sym","G__13527","G__13528","bel.reader/handle-dot","G__13529","G__13530","G__13531","G__13532","bel.reader/handle-excl","G__13533","G__13534","G__13535","G__13536","p__13537","vec__13538","seq__13539","first__13540","bel.reader/handle-no","r","G__13541","cljs.core.concat","G__13542","G__13543","G__13544","G__13545","bel.reader/handle-col","G__13546","G__13547","cljs.core.remove","cljs.core/seqable?","or__5045__auto__","bel.model/pair?","bel.model/symbol?","vec__13548","vec__13551","vec__13554","seq__13555","first__13556","id","cljs.core.filter","p__13557","vec__13558","cljs.core/some","cljs.core.partial","cljs.core/=","before-id","after-id","cljs.core/split-with","cljs.core/not=","bel.reader/abbrev-sym->pair","p__13561","vec__13562","seq__13563","first__13564","bel.reader/transform-number","p__13565","vec__13566","v","clojure.edn.read_string","bel.reader/transform-symbol","p__13569","vec__13570","cljs.core.symbol","bel.reader/transform-char","p__13573","vec__13574","bel.reader/bel-ebnf","instaparse.core/parser","bel.reader/parse-string","bel.reader/unwrap-abbrev-sym-pt","bel.reader/parse-postwalk","cljs.core.comp","bel.reader/parse","clojure.walk/postwalk","clojure.string/trim","bel.reader/bel->pretty","form","pred__13577","expr__13578","G__13580","G__13581","G__13582","G__13583","G__13585","G__13586","G__13588","G__13589","G__13591","G__13592","G__13594","G__13595","G__13596","G__13597","G__13598","G__13599","G__13600","G__13601","bel.model/type-nilable","cljs.core/List","G__13584","G__13587","G__13590","G__13593","vec__13602","a","b"],"sourcesContent":["(ns bel.reader\n  (:require\n   [instaparse.core :as insta :refer-macros [defparser]]\n   [clojure.walk :as walk]\n   [clojure.string :as cstring]\n   [clojure.edn :as edn]\n   [shadow.resource :as rc]\n   [bel.model :as m]))\n\n(defn form-transform\n  [k f]\n  (fn [x]\n    (if (and\n         (coll? x)\n         (= (first x) k))\n      (f x)\n      x)))\n\n;; -------\n;; unwrap\n\n(def unwrap-sexp (form-transform :sexp second))\n\n(def unwrap-space (form-transform :space second))\n\n(def unwrap-name (form-transform :name second))\n\n;; ----\n;; list\n\n(def list->pair\n  (form-transform\n   :list\n   (fn [[_t & children]]\n     (m/seq->p children))))\n\n;; -------\n;; string\n\n(def transform-string\n  (form-transform\n   :string\n   (fn [[_t & children]]\n     (cstring/join (map second children)))))\n\n;; -----\n;; quote\n\n(def quote->pair\n  (form-transform :quote\n                  (fn [[_ exp]]\n                    (m/quoted-p exp))))\n\n;; ----------\n;; abbrev-fn\n\n(def abbrev-fn->pair\n  (form-transform :abbrev_fn\n                  (fn [[_ & xs]]\n                    (m/p\n                     'fn\n                     (m/p\n                      (m/p '_ m/bel-nil)\n                      (m/p\n                       (m/seq->p xs)\n                       m/bel-nil))))))\n\n;; ----------\n;; abbrev-sym\n\n(declare handle-abbrev-sym)\n\n(defn handle-bar [left-xs right-xs]\n  (m/p 't (m/p\n           (handle-abbrev-sym left-xs)\n           (m/p\n            (handle-abbrev-sym right-xs)\n            m/bel-nil))))\n\n(defn handle-dot [left-xs right-xs]\n  (m/p (if (seq left-xs)\n         (handle-abbrev-sym left-xs)\n         'upon)\n       (m/p (handle-abbrev-sym right-xs) m/bel-nil)))\n\n(defn handle-excl [left-xs right-xs]\n  (m/p (if (seq left-xs)\n         (handle-abbrev-sym left-xs)\n         'upon)\n       (m/p (m/quoted-p (handle-abbrev-sym right-xs))\n            m/bel-nil)))\n\n(defn handle-no [left-xs [r & right-xs]]\n  (handle-abbrev-sym\n   (concat left-xs\n           [(m/p\n             'compose\n             (m/p\n              'no\n              (m/p r m/bel-nil)))]\n           right-xs)))\n\n(defn handle-col [left-xs right-xs]\n  (m/p\n   'compose\n   (->> (concat left-xs right-xs)\n        (remove (fn [x] (and (seqable? x) (= (first x) :comp_id))))\n        m/seq->p)))\n\n(defn handle-abbrev-sym [x]\n  (if\n   (or (m/pair? x) (m/symbol? x))\n    x\n    (let [[id f] (->> [[\"|\" handle-bar]\n                       [\".\" handle-dot]\n                       [\"!\" handle-excl]\n                       [\"~\" handle-no]\n                       [\":\" handle-col]]\n                      (filter (fn [[id]]\n                                (some (partial = [:comp_id id]) x)))\n                      first)\n          [before-id [_ & after-id]]\n          (split-with (partial not= [:comp_id id]) x)]\n      (if f\n        (f before-id after-id)\n        (first x)))))\n\n(def abbrev-sym->pair\n  (form-transform :comp_sym\n                  (fn [[_ & xs]]\n                    (handle-abbrev-sym xs))))\n\n;; ------\n;; number\n\n(def transform-number\n  (form-transform :number\n                  (fn [[_ v]] (edn/read-string v))))\n\n;; ------\n;; symbol\n\n(def transform-symbol\n  (form-transform :symbol (fn [[_ v]] (symbol v))))\n\n;; ------\n;; char\n\n(def transform-char\n  (form-transform :char (fn [[_ x]]\n                          (edn/read-string (str \"\\\\\" x)))))\n\n;; -----\n;; bel-parse\n\n(def bel-ebnf (rc/inline \"bel.ebnf\"))\n\n(declare parse-string)\n(defparser parse-string bel-ebnf)\n\n(def unwrap-abbrev-sym-pt (form-transform :abbrev_sym_pt second))\n\n(def parse-postwalk\n  (comp\n   list->pair\n   transform-string\n   quote->pair\n   transform-symbol\n   unwrap-name\n   unwrap-sexp\n   unwrap-abbrev-sym-pt\n   unwrap-space\n   abbrev-fn->pair\n   abbrev-sym->pair\n   transform-number\n   transform-char))\n\n(def parse\n  (comp (partial walk/postwalk parse-postwalk) parse-string cstring/trim))\n\n;; ----------------\n;; bel->pretty\n\n(defn bel->pretty [form]\n  (condp = (m/type-nilable form)\n    'symbol (if (= m/bel-nil form) nil form)\n    'backquote (list 'bq (bel->pretty (second form)))\n    'comma (list 'cm (bel->pretty (second form)))\n    'splice (list 'spl (bel->pretty (second form)))\n    'err (list 'err (bel->pretty (second form)))\n    'char form\n    'number form\n    'string form\n    'pair\n    (let [[a b] form]\n      (concat [(bel->pretty a)]\n              (cond\n                (= m/bel-nil b) nil\n                (m/pair? b) (bel->pretty b)\n                :else ['. (bel->pretty b)])))\n    form))\n"]}